
LCD_with_KEYPAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002412  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00002412  00002486  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001974  00000000  00000000  000024c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c6c  00000000  00000000  00003e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000069a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000788c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000863c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000879c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008a29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000091f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 2a 10 	call	0x2054	; 0x2054 <main>
      7a:	0c 94 07 12 	jmp	0x240e	; 0x240e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 d0 11 	jmp	0x23a0	; 0x23a0 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 d0 11 	jmp	0x23a0	; 0x23a0 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <MDIO_voidSetPinDirection>:
#define DIO_PIND_REG      *((volatile u8 *) 0X30)


// MDIO_voidSetPinDirection(PORTA, PIN7, OUTPUT);
void MDIO_voidSetPinDirection(u8 A_u8PortNo, u8 A_u8PinNo, u8 A_u8PinDirection)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2d 97       	sbiw	r28, 0x0d	; 13
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	6a 83       	std	Y+2, r22	; 0x02
     b4e:	4b 83       	std	Y+3, r20	; 0x03
	if ( (A_u8PortNo<=PORTD) && (A_u8PinNo<=PIN7) && (A_u8PinDirection <=OUTPUT))
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	84 30       	cpi	r24, 0x04	; 4
     b54:	08 f0       	brcs	.+2      	; 0xb58 <MDIO_voidSetPinDirection+0x22>
     b56:	08 c1       	rjmp	.+528    	; 0xd68 <MDIO_voidSetPinDirection+0x232>
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	88 30       	cpi	r24, 0x08	; 8
     b5c:	08 f0       	brcs	.+2      	; 0xb60 <MDIO_voidSetPinDirection+0x2a>
     b5e:	04 c1       	rjmp	.+520    	; 0xd68 <MDIO_voidSetPinDirection+0x232>
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	82 30       	cpi	r24, 0x02	; 2
     b64:	08 f0       	brcs	.+2      	; 0xb68 <MDIO_voidSetPinDirection+0x32>
     b66:	00 c1       	rjmp	.+512    	; 0xd68 <MDIO_voidSetPinDirection+0x232>
	{
		switch (A_u8PortNo)
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3d 87       	std	Y+13, r19	; 0x0d
     b70:	2c 87       	std	Y+12, r18	; 0x0c
     b72:	8c 85       	ldd	r24, Y+12	; 0x0c
     b74:	9d 85       	ldd	r25, Y+13	; 0x0d
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	09 f4       	brne	.+2      	; 0xb7e <MDIO_voidSetPinDirection+0x48>
     b7c:	4f c0       	rjmp	.+158    	; 0xc1c <MDIO_voidSetPinDirection+0xe6>
     b7e:	2c 85       	ldd	r18, Y+12	; 0x0c
     b80:	3d 85       	ldd	r19, Y+13	; 0x0d
     b82:	22 30       	cpi	r18, 0x02	; 2
     b84:	31 05       	cpc	r19, r1
     b86:	2c f4       	brge	.+10     	; 0xb92 <MDIO_voidSetPinDirection+0x5c>
     b88:	8c 85       	ldd	r24, Y+12	; 0x0c
     b8a:	9d 85       	ldd	r25, Y+13	; 0x0d
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	71 f0       	breq	.+28     	; 0xbac <MDIO_voidSetPinDirection+0x76>
     b90:	eb c0       	rjmp	.+470    	; 0xd68 <MDIO_voidSetPinDirection+0x232>
     b92:	2c 85       	ldd	r18, Y+12	; 0x0c
     b94:	3d 85       	ldd	r19, Y+13	; 0x0d
     b96:	22 30       	cpi	r18, 0x02	; 2
     b98:	31 05       	cpc	r19, r1
     b9a:	09 f4       	brne	.+2      	; 0xb9e <MDIO_voidSetPinDirection+0x68>
     b9c:	77 c0       	rjmp	.+238    	; 0xc8c <MDIO_voidSetPinDirection+0x156>
     b9e:	8c 85       	ldd	r24, Y+12	; 0x0c
     ba0:	9d 85       	ldd	r25, Y+13	; 0x0d
     ba2:	83 30       	cpi	r24, 0x03	; 3
     ba4:	91 05       	cpc	r25, r1
     ba6:	09 f4       	brne	.+2      	; 0xbaa <MDIO_voidSetPinDirection+0x74>
     ba8:	a9 c0       	rjmp	.+338    	; 0xcfc <MDIO_voidSetPinDirection+0x1c6>
     baa:	de c0       	rjmp	.+444    	; 0xd68 <MDIO_voidSetPinDirection+0x232>
		{
		  case PORTA:
			  	  	  switch (A_u8PinDirection)
     bac:	8b 81       	ldd	r24, Y+3	; 0x03
     bae:	28 2f       	mov	r18, r24
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	3b 87       	std	Y+11, r19	; 0x0b
     bb4:	2a 87       	std	Y+10, r18	; 0x0a
     bb6:	8a 85       	ldd	r24, Y+10	; 0x0a
     bb8:	9b 85       	ldd	r25, Y+11	; 0x0b
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	d1 f0       	breq	.+52     	; 0xbf2 <MDIO_voidSetPinDirection+0xbc>
     bbe:	2a 85       	ldd	r18, Y+10	; 0x0a
     bc0:	3b 85       	ldd	r19, Y+11	; 0x0b
     bc2:	21 30       	cpi	r18, 0x01	; 1
     bc4:	31 05       	cpc	r19, r1
     bc6:	09 f0       	breq	.+2      	; 0xbca <MDIO_voidSetPinDirection+0x94>
     bc8:	cf c0       	rjmp	.+414    	; 0xd68 <MDIO_voidSetPinDirection+0x232>
			  	  	  {
			  	  	    case OUTPUT: SET_BIT(DIO_DDRA_REG,A_u8PinNo); break;
     bca:	aa e3       	ldi	r26, 0x3A	; 58
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	ea e3       	ldi	r30, 0x3A	; 58
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	48 2f       	mov	r20, r24
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	28 2f       	mov	r18, r24
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	02 2e       	mov	r0, r18
     be2:	02 c0       	rjmp	.+4      	; 0xbe8 <MDIO_voidSetPinDirection+0xb2>
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	0a 94       	dec	r0
     bea:	e2 f7       	brpl	.-8      	; 0xbe4 <MDIO_voidSetPinDirection+0xae>
     bec:	84 2b       	or	r24, r20
     bee:	8c 93       	st	X, r24
     bf0:	bb c0       	rjmp	.+374    	; 0xd68 <MDIO_voidSetPinDirection+0x232>
			  	  	    case INPUT : CLR_BIT(DIO_DDRA_REG,A_u8PinNo); break;
     bf2:	aa e3       	ldi	r26, 0x3A	; 58
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	ea e3       	ldi	r30, 0x3A	; 58
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	48 2f       	mov	r20, r24
     bfe:	8a 81       	ldd	r24, Y+2	; 0x02
     c00:	28 2f       	mov	r18, r24
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	02 2e       	mov	r0, r18
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <MDIO_voidSetPinDirection+0xda>
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	0a 94       	dec	r0
     c12:	e2 f7       	brpl	.-8      	; 0xc0c <MDIO_voidSetPinDirection+0xd6>
     c14:	80 95       	com	r24
     c16:	84 23       	and	r24, r20
     c18:	8c 93       	st	X, r24
     c1a:	a6 c0       	rjmp	.+332    	; 0xd68 <MDIO_voidSetPinDirection+0x232>
			  	  	  }
			  	  	  break;
		 case PORTB:
					  switch (A_u8PinDirection)
     c1c:	8b 81       	ldd	r24, Y+3	; 0x03
     c1e:	28 2f       	mov	r18, r24
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	39 87       	std	Y+9, r19	; 0x09
     c24:	28 87       	std	Y+8, r18	; 0x08
     c26:	88 85       	ldd	r24, Y+8	; 0x08
     c28:	99 85       	ldd	r25, Y+9	; 0x09
     c2a:	00 97       	sbiw	r24, 0x00	; 0
     c2c:	d1 f0       	breq	.+52     	; 0xc62 <MDIO_voidSetPinDirection+0x12c>
     c2e:	28 85       	ldd	r18, Y+8	; 0x08
     c30:	39 85       	ldd	r19, Y+9	; 0x09
     c32:	21 30       	cpi	r18, 0x01	; 1
     c34:	31 05       	cpc	r19, r1
     c36:	09 f0       	breq	.+2      	; 0xc3a <MDIO_voidSetPinDirection+0x104>
     c38:	97 c0       	rjmp	.+302    	; 0xd68 <MDIO_voidSetPinDirection+0x232>
					  {
						case OUTPUT: SET_BIT(DIO_DDRB_REG,A_u8PinNo); break;
     c3a:	a7 e3       	ldi	r26, 0x37	; 55
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	e7 e3       	ldi	r30, 0x37	; 55
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	48 2f       	mov	r20, r24
     c46:	8a 81       	ldd	r24, Y+2	; 0x02
     c48:	28 2f       	mov	r18, r24
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	02 2e       	mov	r0, r18
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <MDIO_voidSetPinDirection+0x122>
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	0a 94       	dec	r0
     c5a:	e2 f7       	brpl	.-8      	; 0xc54 <MDIO_voidSetPinDirection+0x11e>
     c5c:	84 2b       	or	r24, r20
     c5e:	8c 93       	st	X, r24
     c60:	83 c0       	rjmp	.+262    	; 0xd68 <MDIO_voidSetPinDirection+0x232>
						case INPUT : CLR_BIT(DIO_DDRB_REG,A_u8PinNo); break;
     c62:	a7 e3       	ldi	r26, 0x37	; 55
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e7 e3       	ldi	r30, 0x37	; 55
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	48 2f       	mov	r20, r24
     c6e:	8a 81       	ldd	r24, Y+2	; 0x02
     c70:	28 2f       	mov	r18, r24
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	02 2e       	mov	r0, r18
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <MDIO_voidSetPinDirection+0x14a>
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	0a 94       	dec	r0
     c82:	e2 f7       	brpl	.-8      	; 0xc7c <MDIO_voidSetPinDirection+0x146>
     c84:	80 95       	com	r24
     c86:	84 23       	and	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	6e c0       	rjmp	.+220    	; 0xd68 <MDIO_voidSetPinDirection+0x232>
					  }
					  break;
	     case PORTC:
					  switch (A_u8PinDirection)
     c8c:	8b 81       	ldd	r24, Y+3	; 0x03
     c8e:	28 2f       	mov	r18, r24
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	3f 83       	std	Y+7, r19	; 0x07
     c94:	2e 83       	std	Y+6, r18	; 0x06
     c96:	8e 81       	ldd	r24, Y+6	; 0x06
     c98:	9f 81       	ldd	r25, Y+7	; 0x07
     c9a:	00 97       	sbiw	r24, 0x00	; 0
     c9c:	d1 f0       	breq	.+52     	; 0xcd2 <MDIO_voidSetPinDirection+0x19c>
     c9e:	2e 81       	ldd	r18, Y+6	; 0x06
     ca0:	3f 81       	ldd	r19, Y+7	; 0x07
     ca2:	21 30       	cpi	r18, 0x01	; 1
     ca4:	31 05       	cpc	r19, r1
     ca6:	09 f0       	breq	.+2      	; 0xcaa <MDIO_voidSetPinDirection+0x174>
     ca8:	5f c0       	rjmp	.+190    	; 0xd68 <MDIO_voidSetPinDirection+0x232>
					  {
						case OUTPUT: SET_BIT(DIO_DDRC_REG,A_u8PinNo); break;
     caa:	a4 e3       	ldi	r26, 0x34	; 52
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e4 e3       	ldi	r30, 0x34	; 52
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	48 2f       	mov	r20, r24
     cb6:	8a 81       	ldd	r24, Y+2	; 0x02
     cb8:	28 2f       	mov	r18, r24
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	02 2e       	mov	r0, r18
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <MDIO_voidSetPinDirection+0x192>
     cc4:	88 0f       	add	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	0a 94       	dec	r0
     cca:	e2 f7       	brpl	.-8      	; 0xcc4 <MDIO_voidSetPinDirection+0x18e>
     ccc:	84 2b       	or	r24, r20
     cce:	8c 93       	st	X, r24
     cd0:	4b c0       	rjmp	.+150    	; 0xd68 <MDIO_voidSetPinDirection+0x232>
						case INPUT : CLR_BIT(DIO_DDRC_REG,A_u8PinNo); break;
     cd2:	a4 e3       	ldi	r26, 0x34	; 52
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e4 e3       	ldi	r30, 0x34	; 52
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	48 2f       	mov	r20, r24
     cde:	8a 81       	ldd	r24, Y+2	; 0x02
     ce0:	28 2f       	mov	r18, r24
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	02 2e       	mov	r0, r18
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <MDIO_voidSetPinDirection+0x1ba>
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	0a 94       	dec	r0
     cf2:	e2 f7       	brpl	.-8      	; 0xcec <MDIO_voidSetPinDirection+0x1b6>
     cf4:	80 95       	com	r24
     cf6:	84 23       	and	r24, r20
     cf8:	8c 93       	st	X, r24
     cfa:	36 c0       	rjmp	.+108    	; 0xd68 <MDIO_voidSetPinDirection+0x232>
					  }
					  break;
	     case PORTD:
					  switch (A_u8PinDirection)
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	3d 83       	std	Y+5, r19	; 0x05
     d04:	2c 83       	std	Y+4, r18	; 0x04
     d06:	8c 81       	ldd	r24, Y+4	; 0x04
     d08:	9d 81       	ldd	r25, Y+5	; 0x05
     d0a:	00 97       	sbiw	r24, 0x00	; 0
     d0c:	c9 f0       	breq	.+50     	; 0xd40 <MDIO_voidSetPinDirection+0x20a>
     d0e:	2c 81       	ldd	r18, Y+4	; 0x04
     d10:	3d 81       	ldd	r19, Y+5	; 0x05
     d12:	21 30       	cpi	r18, 0x01	; 1
     d14:	31 05       	cpc	r19, r1
     d16:	41 f5       	brne	.+80     	; 0xd68 <MDIO_voidSetPinDirection+0x232>
					  {
						case OUTPUT: SET_BIT(DIO_DDRD_REG,A_u8PinNo); break;
     d18:	a1 e3       	ldi	r26, 0x31	; 49
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e1 e3       	ldi	r30, 0x31	; 49
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	48 2f       	mov	r20, r24
     d24:	8a 81       	ldd	r24, Y+2	; 0x02
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	02 2e       	mov	r0, r18
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <MDIO_voidSetPinDirection+0x200>
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	0a 94       	dec	r0
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <MDIO_voidSetPinDirection+0x1fc>
     d3a:	84 2b       	or	r24, r20
     d3c:	8c 93       	st	X, r24
     d3e:	14 c0       	rjmp	.+40     	; 0xd68 <MDIO_voidSetPinDirection+0x232>
						case INPUT : CLR_BIT(DIO_DDRD_REG,A_u8PinNo); break;
     d40:	a1 e3       	ldi	r26, 0x31	; 49
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e1 e3       	ldi	r30, 0x31	; 49
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	48 2f       	mov	r20, r24
     d4c:	8a 81       	ldd	r24, Y+2	; 0x02
     d4e:	28 2f       	mov	r18, r24
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	02 2e       	mov	r0, r18
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <MDIO_voidSetPinDirection+0x228>
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	0a 94       	dec	r0
     d60:	e2 f7       	brpl	.-8      	; 0xd5a <MDIO_voidSetPinDirection+0x224>
     d62:	80 95       	com	r24
     d64:	84 23       	and	r24, r20
     d66:	8c 93       	st	X, r24
	else
	{

	}
	return;
}
     d68:	2d 96       	adiw	r28, 0x0d	; 13
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	08 95       	ret

00000d7a <MDIO_voidSetPinValue>:


void MDIO_voidSetPinValue(u8 A_u8PortNo, u8 A_u8PinNo, u8 A_u8PinValue)
{
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	2d 97       	sbiw	r28, 0x0d	; 13
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	f8 94       	cli
     d88:	de bf       	out	0x3e, r29	; 62
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	cd bf       	out	0x3d, r28	; 61
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	6a 83       	std	Y+2, r22	; 0x02
     d92:	4b 83       	std	Y+3, r20	; 0x03
	if ( (A_u8PortNo<=PORTD) && (A_u8PinNo<=PIN7) && (A_u8PinValue <=HIGH))
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	84 30       	cpi	r24, 0x04	; 4
     d98:	08 f0       	brcs	.+2      	; 0xd9c <MDIO_voidSetPinValue+0x22>
     d9a:	08 c1       	rjmp	.+528    	; 0xfac <MDIO_voidSetPinValue+0x232>
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	88 30       	cpi	r24, 0x08	; 8
     da0:	08 f0       	brcs	.+2      	; 0xda4 <MDIO_voidSetPinValue+0x2a>
     da2:	04 c1       	rjmp	.+520    	; 0xfac <MDIO_voidSetPinValue+0x232>
     da4:	8b 81       	ldd	r24, Y+3	; 0x03
     da6:	82 30       	cpi	r24, 0x02	; 2
     da8:	08 f0       	brcs	.+2      	; 0xdac <MDIO_voidSetPinValue+0x32>
     daa:	00 c1       	rjmp	.+512    	; 0xfac <MDIO_voidSetPinValue+0x232>
	{
		switch (A_u8PortNo)
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	3d 87       	std	Y+13, r19	; 0x0d
     db4:	2c 87       	std	Y+12, r18	; 0x0c
     db6:	8c 85       	ldd	r24, Y+12	; 0x0c
     db8:	9d 85       	ldd	r25, Y+13	; 0x0d
     dba:	81 30       	cpi	r24, 0x01	; 1
     dbc:	91 05       	cpc	r25, r1
     dbe:	09 f4       	brne	.+2      	; 0xdc2 <MDIO_voidSetPinValue+0x48>
     dc0:	4f c0       	rjmp	.+158    	; 0xe60 <MDIO_voidSetPinValue+0xe6>
     dc2:	2c 85       	ldd	r18, Y+12	; 0x0c
     dc4:	3d 85       	ldd	r19, Y+13	; 0x0d
     dc6:	22 30       	cpi	r18, 0x02	; 2
     dc8:	31 05       	cpc	r19, r1
     dca:	2c f4       	brge	.+10     	; 0xdd6 <MDIO_voidSetPinValue+0x5c>
     dcc:	8c 85       	ldd	r24, Y+12	; 0x0c
     dce:	9d 85       	ldd	r25, Y+13	; 0x0d
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	71 f0       	breq	.+28     	; 0xdf0 <MDIO_voidSetPinValue+0x76>
     dd4:	eb c0       	rjmp	.+470    	; 0xfac <MDIO_voidSetPinValue+0x232>
     dd6:	2c 85       	ldd	r18, Y+12	; 0x0c
     dd8:	3d 85       	ldd	r19, Y+13	; 0x0d
     dda:	22 30       	cpi	r18, 0x02	; 2
     ddc:	31 05       	cpc	r19, r1
     dde:	09 f4       	brne	.+2      	; 0xde2 <MDIO_voidSetPinValue+0x68>
     de0:	77 c0       	rjmp	.+238    	; 0xed0 <MDIO_voidSetPinValue+0x156>
     de2:	8c 85       	ldd	r24, Y+12	; 0x0c
     de4:	9d 85       	ldd	r25, Y+13	; 0x0d
     de6:	83 30       	cpi	r24, 0x03	; 3
     de8:	91 05       	cpc	r25, r1
     dea:	09 f4       	brne	.+2      	; 0xdee <MDIO_voidSetPinValue+0x74>
     dec:	a9 c0       	rjmp	.+338    	; 0xf40 <MDIO_voidSetPinValue+0x1c6>
     dee:	de c0       	rjmp	.+444    	; 0xfac <MDIO_voidSetPinValue+0x232>
		{
			case PORTA:
						switch (A_u8PinValue)
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	3b 87       	std	Y+11, r19	; 0x0b
     df8:	2a 87       	std	Y+10, r18	; 0x0a
     dfa:	8a 85       	ldd	r24, Y+10	; 0x0a
     dfc:	9b 85       	ldd	r25, Y+11	; 0x0b
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	d1 f0       	breq	.+52     	; 0xe36 <MDIO_voidSetPinValue+0xbc>
     e02:	2a 85       	ldd	r18, Y+10	; 0x0a
     e04:	3b 85       	ldd	r19, Y+11	; 0x0b
     e06:	21 30       	cpi	r18, 0x01	; 1
     e08:	31 05       	cpc	r19, r1
     e0a:	09 f0       	breq	.+2      	; 0xe0e <MDIO_voidSetPinValue+0x94>
     e0c:	cf c0       	rjmp	.+414    	; 0xfac <MDIO_voidSetPinValue+0x232>
						{
						case HIGH: SET_BIT(DIO_PORTA_REG,A_u8PinNo); break;
     e0e:	ab e3       	ldi	r26, 0x3B	; 59
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	eb e3       	ldi	r30, 0x3B	; 59
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	48 2f       	mov	r20, r24
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 2e       	mov	r0, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <MDIO_voidSetPinValue+0xb2>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	0a 94       	dec	r0
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <MDIO_voidSetPinValue+0xae>
     e30:	84 2b       	or	r24, r20
     e32:	8c 93       	st	X, r24
     e34:	bb c0       	rjmp	.+374    	; 0xfac <MDIO_voidSetPinValue+0x232>
						case LOW : CLR_BIT(DIO_PORTA_REG,A_u8PinNo); break;
     e36:	ab e3       	ldi	r26, 0x3B	; 59
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	eb e3       	ldi	r30, 0x3B	; 59
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	48 2f       	mov	r20, r24
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	02 2e       	mov	r0, r18
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <MDIO_voidSetPinValue+0xda>
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	0a 94       	dec	r0
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <MDIO_voidSetPinValue+0xd6>
     e58:	80 95       	com	r24
     e5a:	84 23       	and	r24, r20
     e5c:	8c 93       	st	X, r24
     e5e:	a6 c0       	rjmp	.+332    	; 0xfac <MDIO_voidSetPinValue+0x232>
						}
						break;
			case PORTB:
						switch (A_u8PinValue)
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	39 87       	std	Y+9, r19	; 0x09
     e68:	28 87       	std	Y+8, r18	; 0x08
     e6a:	88 85       	ldd	r24, Y+8	; 0x08
     e6c:	99 85       	ldd	r25, Y+9	; 0x09
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	d1 f0       	breq	.+52     	; 0xea6 <MDIO_voidSetPinValue+0x12c>
     e72:	28 85       	ldd	r18, Y+8	; 0x08
     e74:	39 85       	ldd	r19, Y+9	; 0x09
     e76:	21 30       	cpi	r18, 0x01	; 1
     e78:	31 05       	cpc	r19, r1
     e7a:	09 f0       	breq	.+2      	; 0xe7e <MDIO_voidSetPinValue+0x104>
     e7c:	97 c0       	rjmp	.+302    	; 0xfac <MDIO_voidSetPinValue+0x232>
						{
						case HIGH: SET_BIT(DIO_PORTB_REG,A_u8PinNo); break;
     e7e:	a8 e3       	ldi	r26, 0x38	; 56
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e8 e3       	ldi	r30, 0x38	; 56
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	48 2f       	mov	r20, r24
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 2e       	mov	r0, r18
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <MDIO_voidSetPinValue+0x122>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <MDIO_voidSetPinValue+0x11e>
     ea0:	84 2b       	or	r24, r20
     ea2:	8c 93       	st	X, r24
     ea4:	83 c0       	rjmp	.+262    	; 0xfac <MDIO_voidSetPinValue+0x232>
						case LOW : CLR_BIT(DIO_PORTB_REG,A_u8PinNo); break;
     ea6:	a8 e3       	ldi	r26, 0x38	; 56
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e8 e3       	ldi	r30, 0x38	; 56
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	48 2f       	mov	r20, r24
     eb2:	8a 81       	ldd	r24, Y+2	; 0x02
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	02 2e       	mov	r0, r18
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <MDIO_voidSetPinValue+0x14a>
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	0a 94       	dec	r0
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <MDIO_voidSetPinValue+0x146>
     ec8:	80 95       	com	r24
     eca:	84 23       	and	r24, r20
     ecc:	8c 93       	st	X, r24
     ece:	6e c0       	rjmp	.+220    	; 0xfac <MDIO_voidSetPinValue+0x232>
						}
						break;
			case PORTC:
						switch (A_u8PinValue)
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	3f 83       	std	Y+7, r19	; 0x07
     ed8:	2e 83       	std	Y+6, r18	; 0x06
     eda:	8e 81       	ldd	r24, Y+6	; 0x06
     edc:	9f 81       	ldd	r25, Y+7	; 0x07
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	d1 f0       	breq	.+52     	; 0xf16 <MDIO_voidSetPinValue+0x19c>
     ee2:	2e 81       	ldd	r18, Y+6	; 0x06
     ee4:	3f 81       	ldd	r19, Y+7	; 0x07
     ee6:	21 30       	cpi	r18, 0x01	; 1
     ee8:	31 05       	cpc	r19, r1
     eea:	09 f0       	breq	.+2      	; 0xeee <MDIO_voidSetPinValue+0x174>
     eec:	5f c0       	rjmp	.+190    	; 0xfac <MDIO_voidSetPinValue+0x232>
						{
						case HIGH: SET_BIT(DIO_PORTC_REG,A_u8PinNo); break;
     eee:	a5 e3       	ldi	r26, 0x35	; 53
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e5 e3       	ldi	r30, 0x35	; 53
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <MDIO_voidSetPinValue+0x192>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <MDIO_voidSetPinValue+0x18e>
     f10:	84 2b       	or	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	4b c0       	rjmp	.+150    	; 0xfac <MDIO_voidSetPinValue+0x232>
						case LOW : CLR_BIT(DIO_PORTC_REG,A_u8PinNo); break;
     f16:	a5 e3       	ldi	r26, 0x35	; 53
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e5 e3       	ldi	r30, 0x35	; 53
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <MDIO_voidSetPinValue+0x1ba>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <MDIO_voidSetPinValue+0x1b6>
     f38:	80 95       	com	r24
     f3a:	84 23       	and	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	36 c0       	rjmp	.+108    	; 0xfac <MDIO_voidSetPinValue+0x232>
						}
						break;
			case PORTD:
						switch (A_u8PinValue)
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	3d 83       	std	Y+5, r19	; 0x05
     f48:	2c 83       	std	Y+4, r18	; 0x04
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	c9 f0       	breq	.+50     	; 0xf84 <MDIO_voidSetPinValue+0x20a>
     f52:	2c 81       	ldd	r18, Y+4	; 0x04
     f54:	3d 81       	ldd	r19, Y+5	; 0x05
     f56:	21 30       	cpi	r18, 0x01	; 1
     f58:	31 05       	cpc	r19, r1
     f5a:	41 f5       	brne	.+80     	; 0xfac <MDIO_voidSetPinValue+0x232>
						{
						case HIGH: SET_BIT(DIO_PORTD_REG,A_u8PinNo); break;
     f5c:	a2 e3       	ldi	r26, 0x32	; 50
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e2 e3       	ldi	r30, 0x32	; 50
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	48 2f       	mov	r20, r24
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	02 2e       	mov	r0, r18
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <MDIO_voidSetPinValue+0x200>
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	0a 94       	dec	r0
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <MDIO_voidSetPinValue+0x1fc>
     f7e:	84 2b       	or	r24, r20
     f80:	8c 93       	st	X, r24
     f82:	14 c0       	rjmp	.+40     	; 0xfac <MDIO_voidSetPinValue+0x232>
						case LOW : CLR_BIT(DIO_PORTD_REG,A_u8PinNo); break;
     f84:	a2 e3       	ldi	r26, 0x32	; 50
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e2 e3       	ldi	r30, 0x32	; 50
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	48 2f       	mov	r20, r24
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	02 2e       	mov	r0, r18
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <MDIO_voidSetPinValue+0x228>
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	0a 94       	dec	r0
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <MDIO_voidSetPinValue+0x224>
     fa6:	80 95       	com	r24
     fa8:	84 23       	and	r24, r20
     faa:	8c 93       	st	X, r24
						}
						break;
		}
	}
}
     fac:	2d 96       	adiw	r28, 0x0d	; 13
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <MDIO_u8GetPinValue>:


u8   MDIO_u8GetPinValue(u8 A_u8PortNo, u8 A_u8PinNo)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <MDIO_u8GetPinValue+0x6>
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <MDIO_u8GetPinValue+0x8>
     fc6:	0f 92       	push	r0
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	8a 83       	std	Y+2, r24	; 0x02
     fce:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8PinValue=5;
     fd0:	85 e0       	ldi	r24, 0x05	; 5
     fd2:	89 83       	std	Y+1, r24	; 0x01
	if ( (A_u8PortNo<=PORTD) && (A_u8PinNo<=PIN7) )
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	84 30       	cpi	r24, 0x04	; 4
     fd8:	08 f0       	brcs	.+2      	; 0xfdc <MDIO_u8GetPinValue+0x1e>
     fda:	6b c0       	rjmp	.+214    	; 0x10b2 <MDIO_u8GetPinValue+0xf4>
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	88 30       	cpi	r24, 0x08	; 8
     fe0:	08 f0       	brcs	.+2      	; 0xfe4 <MDIO_u8GetPinValue+0x26>
     fe2:	67 c0       	rjmp	.+206    	; 0x10b2 <MDIO_u8GetPinValue+0xf4>
		{
			switch (A_u8PortNo)
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	3d 83       	std	Y+5, r19	; 0x05
     fec:	2c 83       	std	Y+4, r18	; 0x04
     fee:	4c 81       	ldd	r20, Y+4	; 0x04
     ff0:	5d 81       	ldd	r21, Y+5	; 0x05
     ff2:	41 30       	cpi	r20, 0x01	; 1
     ff4:	51 05       	cpc	r21, r1
     ff6:	41 f1       	breq	.+80     	; 0x1048 <MDIO_u8GetPinValue+0x8a>
     ff8:	8c 81       	ldd	r24, Y+4	; 0x04
     ffa:	9d 81       	ldd	r25, Y+5	; 0x05
     ffc:	82 30       	cpi	r24, 0x02	; 2
     ffe:	91 05       	cpc	r25, r1
    1000:	34 f4       	brge	.+12     	; 0x100e <MDIO_u8GetPinValue+0x50>
    1002:	2c 81       	ldd	r18, Y+4	; 0x04
    1004:	3d 81       	ldd	r19, Y+5	; 0x05
    1006:	21 15       	cp	r18, r1
    1008:	31 05       	cpc	r19, r1
    100a:	61 f0       	breq	.+24     	; 0x1024 <MDIO_u8GetPinValue+0x66>
    100c:	52 c0       	rjmp	.+164    	; 0x10b2 <MDIO_u8GetPinValue+0xf4>
    100e:	4c 81       	ldd	r20, Y+4	; 0x04
    1010:	5d 81       	ldd	r21, Y+5	; 0x05
    1012:	42 30       	cpi	r20, 0x02	; 2
    1014:	51 05       	cpc	r21, r1
    1016:	51 f1       	breq	.+84     	; 0x106c <MDIO_u8GetPinValue+0xae>
    1018:	8c 81       	ldd	r24, Y+4	; 0x04
    101a:	9d 81       	ldd	r25, Y+5	; 0x05
    101c:	83 30       	cpi	r24, 0x03	; 3
    101e:	91 05       	cpc	r25, r1
    1020:	b9 f1       	breq	.+110    	; 0x1090 <MDIO_u8GetPinValue+0xd2>
    1022:	47 c0       	rjmp	.+142    	; 0x10b2 <MDIO_u8GetPinValue+0xf4>
			{
			 case PORTA: local_u8PinValue= GET_BIT(DIO_PINA_REG,A_u8PinNo);  break;
    1024:	e9 e3       	ldi	r30, 0x39	; 57
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	a9 01       	movw	r20, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <MDIO_u8GetPinValue+0x7e>
    1038:	55 95       	asr	r21
    103a:	47 95       	ror	r20
    103c:	8a 95       	dec	r24
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <MDIO_u8GetPinValue+0x7a>
    1040:	ca 01       	movw	r24, r20
    1042:	81 70       	andi	r24, 0x01	; 1
    1044:	89 83       	std	Y+1, r24	; 0x01
    1046:	35 c0       	rjmp	.+106    	; 0x10b2 <MDIO_u8GetPinValue+0xf4>
			 case PORTB: local_u8PinValue= GET_BIT(DIO_PINB_REG,A_u8PinNo);  break;
    1048:	e6 e3       	ldi	r30, 0x36	; 54
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	88 2f       	mov	r24, r24
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	a9 01       	movw	r20, r18
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <MDIO_u8GetPinValue+0xa2>
    105c:	55 95       	asr	r21
    105e:	47 95       	ror	r20
    1060:	8a 95       	dec	r24
    1062:	e2 f7       	brpl	.-8      	; 0x105c <MDIO_u8GetPinValue+0x9e>
    1064:	ca 01       	movw	r24, r20
    1066:	81 70       	andi	r24, 0x01	; 1
    1068:	89 83       	std	Y+1, r24	; 0x01
    106a:	23 c0       	rjmp	.+70     	; 0x10b2 <MDIO_u8GetPinValue+0xf4>
			 case PORTC: local_u8PinValue= GET_BIT(DIO_PINC_REG,A_u8PinNo);  break;
    106c:	e3 e3       	ldi	r30, 0x33	; 51
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	a9 01       	movw	r20, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <MDIO_u8GetPinValue+0xc6>
    1080:	55 95       	asr	r21
    1082:	47 95       	ror	r20
    1084:	8a 95       	dec	r24
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <MDIO_u8GetPinValue+0xc2>
    1088:	ca 01       	movw	r24, r20
    108a:	81 70       	andi	r24, 0x01	; 1
    108c:	89 83       	std	Y+1, r24	; 0x01
    108e:	11 c0       	rjmp	.+34     	; 0x10b2 <MDIO_u8GetPinValue+0xf4>
			 case PORTD: local_u8PinValue= GET_BIT(DIO_PIND_REG,A_u8PinNo);  break;
    1090:	e0 e3       	ldi	r30, 0x30	; 48
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	88 2f       	mov	r24, r24
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	a9 01       	movw	r20, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <MDIO_u8GetPinValue+0xea>
    10a4:	55 95       	asr	r21
    10a6:	47 95       	ror	r20
    10a8:	8a 95       	dec	r24
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <MDIO_u8GetPinValue+0xe6>
    10ac:	ca 01       	movw	r24, r20
    10ae:	81 70       	andi	r24, 0x01	; 1
    10b0:	89 83       	std	Y+1, r24	; 0x01
			}
		}

	return local_u8PinValue;
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <MDIO_voidSetPortDirection>:



void MDIO_voidSetPortDirection(u8 A_u8PortNo,u8 A_u8PortDirection)
{
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <MDIO_voidSetPortDirection+0x6>
    10ca:	00 d0       	rcall	.+0      	; 0x10cc <MDIO_voidSetPortDirection+0x8>
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	89 83       	std	Y+1, r24	; 0x01
    10d2:	6a 83       	std	Y+2, r22	; 0x02
	if ( (A_u8PortNo<=PORTD) )
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	84 30       	cpi	r24, 0x04	; 4
    10d8:	90 f5       	brcc	.+100    	; 0x113e <MDIO_voidSetPortDirection+0x7a>
		{
			switch (A_u8PortNo)
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	3c 83       	std	Y+4, r19	; 0x04
    10e2:	2b 83       	std	Y+3, r18	; 0x03
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	91 05       	cpc	r25, r1
    10ec:	d1 f0       	breq	.+52     	; 0x1122 <MDIO_voidSetPortDirection+0x5e>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	2c f4       	brge	.+10     	; 0x1102 <MDIO_voidSetPortDirection+0x3e>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	00 97       	sbiw	r24, 0x00	; 0
    10fe:	61 f0       	breq	.+24     	; 0x1118 <MDIO_voidSetPortDirection+0x54>
    1100:	1e c0       	rjmp	.+60     	; 0x113e <MDIO_voidSetPortDirection+0x7a>
    1102:	2b 81       	ldd	r18, Y+3	; 0x03
    1104:	3c 81       	ldd	r19, Y+4	; 0x04
    1106:	22 30       	cpi	r18, 0x02	; 2
    1108:	31 05       	cpc	r19, r1
    110a:	81 f0       	breq	.+32     	; 0x112c <MDIO_voidSetPortDirection+0x68>
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	9c 81       	ldd	r25, Y+4	; 0x04
    1110:	83 30       	cpi	r24, 0x03	; 3
    1112:	91 05       	cpc	r25, r1
    1114:	81 f0       	breq	.+32     	; 0x1136 <MDIO_voidSetPortDirection+0x72>
    1116:	13 c0       	rjmp	.+38     	; 0x113e <MDIO_voidSetPortDirection+0x7a>
			{
			 case PORTA: DIO_DDRA_REG= A_u8PortDirection;  break;
    1118:	ea e3       	ldi	r30, 0x3A	; 58
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	0e c0       	rjmp	.+28     	; 0x113e <MDIO_voidSetPortDirection+0x7a>
			 case PORTB: DIO_DDRB_REG= A_u8PortDirection;  break;
    1122:	e7 e3       	ldi	r30, 0x37	; 55
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
    112a:	09 c0       	rjmp	.+18     	; 0x113e <MDIO_voidSetPortDirection+0x7a>
			 case PORTC: DIO_DDRC_REG= A_u8PortDirection;  break;
    112c:	e4 e3       	ldi	r30, 0x34	; 52
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	80 83       	st	Z, r24
    1134:	04 c0       	rjmp	.+8      	; 0x113e <MDIO_voidSetPortDirection+0x7a>
			 case PORTD: DIO_DDRD_REG= A_u8PortDirection;  break;
    1136:	e1 e3       	ldi	r30, 0x31	; 49
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	80 83       	st	Z, r24
			}
		}

}
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue    (u8 A_u8PortNo,u8 A_u8PortValue)
{
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	00 d0       	rcall	.+0      	; 0x1152 <MDIO_voidSetPortValue+0x6>
    1152:	00 d0       	rcall	.+0      	; 0x1154 <MDIO_voidSetPortValue+0x8>
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	89 83       	std	Y+1, r24	; 0x01
    115a:	6a 83       	std	Y+2, r22	; 0x02
	if ( (A_u8PortNo<=PORTD) )
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	84 30       	cpi	r24, 0x04	; 4
    1160:	90 f5       	brcc	.+100    	; 0x11c6 <MDIO_voidSetPortValue+0x7a>
			{
				switch (A_u8PortNo)
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	3c 83       	std	Y+4, r19	; 0x04
    116a:	2b 83       	std	Y+3, r18	; 0x03
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	91 05       	cpc	r25, r1
    1174:	d1 f0       	breq	.+52     	; 0x11aa <MDIO_voidSetPortValue+0x5e>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	2c f4       	brge	.+10     	; 0x118a <MDIO_voidSetPortValue+0x3e>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	00 97       	sbiw	r24, 0x00	; 0
    1186:	61 f0       	breq	.+24     	; 0x11a0 <MDIO_voidSetPortValue+0x54>
    1188:	1e c0       	rjmp	.+60     	; 0x11c6 <MDIO_voidSetPortValue+0x7a>
    118a:	2b 81       	ldd	r18, Y+3	; 0x03
    118c:	3c 81       	ldd	r19, Y+4	; 0x04
    118e:	22 30       	cpi	r18, 0x02	; 2
    1190:	31 05       	cpc	r19, r1
    1192:	81 f0       	breq	.+32     	; 0x11b4 <MDIO_voidSetPortValue+0x68>
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	9c 81       	ldd	r25, Y+4	; 0x04
    1198:	83 30       	cpi	r24, 0x03	; 3
    119a:	91 05       	cpc	r25, r1
    119c:	81 f0       	breq	.+32     	; 0x11be <MDIO_voidSetPortValue+0x72>
    119e:	13 c0       	rjmp	.+38     	; 0x11c6 <MDIO_voidSetPortValue+0x7a>
				{
				 case PORTA: DIO_PORTA_REG= A_u8PortValue;  break;
    11a0:	eb e3       	ldi	r30, 0x3B	; 59
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	80 83       	st	Z, r24
    11a8:	0e c0       	rjmp	.+28     	; 0x11c6 <MDIO_voidSetPortValue+0x7a>
				 case PORTB: DIO_PORTB_REG= A_u8PortValue;  break;
    11aa:	e8 e3       	ldi	r30, 0x38	; 56
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	80 83       	st	Z, r24
    11b2:	09 c0       	rjmp	.+18     	; 0x11c6 <MDIO_voidSetPortValue+0x7a>
				 case PORTC: DIO_PORTC_REG= A_u8PortValue;  break;
    11b4:	e5 e3       	ldi	r30, 0x35	; 53
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	80 83       	st	Z, r24
    11bc:	04 c0       	rjmp	.+8      	; 0x11c6 <MDIO_voidSetPortValue+0x7a>
				 case PORTD: DIO_PORTD_REG= A_u8PortValue;  break;
    11be:	e2 e3       	ldi	r30, 0x32	; 50
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	80 83       	st	Z, r24
				}
			}
}
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <HKEYPAD_u8GetPressedKey>:
															 {'c','0','=','+'}};

	// Row output
	// Col Input pull-up
u8 HKEYPAD_u8GetPressedKey (void)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	63 97       	sbiw	r28, 0x13	; 19
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	de bf       	out	0x3e, r29	; 62
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8RowCounter,local_u8ColCounter,local_u8PinValue, local_u8KeyValue=KEYPAD_u8_KEY_NOT_PRESSED;
    11e8:	8f ef       	ldi	r24, 0xFF	; 255
    11ea:	88 8b       	std	Y+16, r24	; 0x10
	u8 local_u8Flag=KEYPAD_u8_FLAG_DOWN;
    11ec:	1f 86       	std	Y+15, r1	; 0x0f
	for (local_u8RowCounter=0; local_u8RowCounter<KEYPAD_u8_ROW_NUM;local_u8RowCounter++)
    11ee:	1b 8a       	std	Y+19, r1	; 0x13
    11f0:	c0 c0       	rjmp	.+384    	; 0x1372 <HKEYPAD_u8GetPressedKey+0x19e>
	{
		MDIO_voidSetPinValue(KEYPAD_PORT, local_u8RowCounter, LOW);
    11f2:	82 e0       	ldi	r24, 0x02	; 2
    11f4:	6b 89       	ldd	r22, Y+19	; 0x13
    11f6:	40 e0       	ldi	r20, 0x00	; 0
    11f8:	0e 94 bd 06 	call	0xd7a	; 0xd7a <MDIO_voidSetPinValue>

		for (local_u8ColCounter=0;local_u8ColCounter<KEYPAD_u8_COL_NUM;local_u8ColCounter++)
    11fc:	1a 8a       	std	Y+18, r1	; 0x12
    11fe:	aa c0       	rjmp	.+340    	; 0x1354 <HKEYPAD_u8GetPressedKey+0x180>
		{
			local_u8PinValue = MDIO_u8GetPinValue(KEYPAD_PORT, (local_u8ColCounter+4));
    1200:	8a 89       	ldd	r24, Y+18	; 0x12
    1202:	98 2f       	mov	r25, r24
    1204:	9c 5f       	subi	r25, 0xFC	; 252
    1206:	82 e0       	ldi	r24, 0x02	; 2
    1208:	69 2f       	mov	r22, r25
    120a:	0e 94 df 07 	call	0xfbe	; 0xfbe <MDIO_u8GetPinValue>
    120e:	89 8b       	std	Y+17, r24	; 0x11
			if (local_u8PinValue==0)
    1210:	89 89       	ldd	r24, Y+17	; 0x11
    1212:	88 23       	and	r24, r24
    1214:	09 f0       	breq	.+2      	; 0x1218 <HKEYPAD_u8GetPressedKey+0x44>
    1216:	9b c0       	rjmp	.+310    	; 0x134e <HKEYPAD_u8GetPressedKey+0x17a>
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	a0 ea       	ldi	r26, 0xA0	; 160
    121e:	b1 e4       	ldi	r27, 0x41	; 65
    1220:	8b 87       	std	Y+11, r24	; 0x0b
    1222:	9c 87       	std	Y+12, r25	; 0x0c
    1224:	ad 87       	std	Y+13, r26	; 0x0d
    1226:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1228:	6b 85       	ldd	r22, Y+11	; 0x0b
    122a:	7c 85       	ldd	r23, Y+12	; 0x0c
    122c:	8d 85       	ldd	r24, Y+13	; 0x0d
    122e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	4a ef       	ldi	r20, 0xFA	; 250
    1236:	54 e4       	ldi	r21, 0x44	; 68
    1238:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	8f 83       	std	Y+7, r24	; 0x07
    1242:	98 87       	std	Y+8, r25	; 0x08
    1244:	a9 87       	std	Y+9, r26	; 0x09
    1246:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1248:	6f 81       	ldd	r22, Y+7	; 0x07
    124a:	78 85       	ldd	r23, Y+8	; 0x08
    124c:	89 85       	ldd	r24, Y+9	; 0x09
    124e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	40 e8       	ldi	r20, 0x80	; 128
    1256:	5f e3       	ldi	r21, 0x3F	; 63
    1258:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    125c:	88 23       	and	r24, r24
    125e:	2c f4       	brge	.+10     	; 0x126a <HKEYPAD_u8GetPressedKey+0x96>
		__ticks = 1;
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	9e 83       	std	Y+6, r25	; 0x06
    1266:	8d 83       	std	Y+5, r24	; 0x05
    1268:	3f c0       	rjmp	.+126    	; 0x12e8 <HKEYPAD_u8GetPressedKey+0x114>
	else if (__tmp > 65535)
    126a:	6f 81       	ldd	r22, Y+7	; 0x07
    126c:	78 85       	ldd	r23, Y+8	; 0x08
    126e:	89 85       	ldd	r24, Y+9	; 0x09
    1270:	9a 85       	ldd	r25, Y+10	; 0x0a
    1272:	20 e0       	ldi	r18, 0x00	; 0
    1274:	3f ef       	ldi	r19, 0xFF	; 255
    1276:	4f e7       	ldi	r20, 0x7F	; 127
    1278:	57 e4       	ldi	r21, 0x47	; 71
    127a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    127e:	18 16       	cp	r1, r24
    1280:	4c f5       	brge	.+82     	; 0x12d4 <HKEYPAD_u8GetPressedKey+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1282:	6b 85       	ldd	r22, Y+11	; 0x0b
    1284:	7c 85       	ldd	r23, Y+12	; 0x0c
    1286:	8d 85       	ldd	r24, Y+13	; 0x0d
    1288:	9e 85       	ldd	r25, Y+14	; 0x0e
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e2       	ldi	r20, 0x20	; 32
    1290:	51 e4       	ldi	r21, 0x41	; 65
    1292:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1296:	dc 01       	movw	r26, r24
    1298:	cb 01       	movw	r24, r22
    129a:	bc 01       	movw	r22, r24
    129c:	cd 01       	movw	r24, r26
    129e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	9e 83       	std	Y+6, r25	; 0x06
    12a8:	8d 83       	std	Y+5, r24	; 0x05
    12aa:	0f c0       	rjmp	.+30     	; 0x12ca <HKEYPAD_u8GetPressedKey+0xf6>
    12ac:	88 ec       	ldi	r24, 0xC8	; 200
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	9c 83       	std	Y+4, r25	; 0x04
    12b2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	01 97       	sbiw	r24, 0x01	; 1
    12ba:	f1 f7       	brne	.-4      	; 0x12b8 <HKEYPAD_u8GetPressedKey+0xe4>
    12bc:	9c 83       	std	Y+4, r25	; 0x04
    12be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c0:	8d 81       	ldd	r24, Y+5	; 0x05
    12c2:	9e 81       	ldd	r25, Y+6	; 0x06
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	9e 83       	std	Y+6, r25	; 0x06
    12c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ca:	8d 81       	ldd	r24, Y+5	; 0x05
    12cc:	9e 81       	ldd	r25, Y+6	; 0x06
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	69 f7       	brne	.-38     	; 0x12ac <HKEYPAD_u8GetPressedKey+0xd8>
    12d2:	14 c0       	rjmp	.+40     	; 0x12fc <HKEYPAD_u8GetPressedKey+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d4:	6f 81       	ldd	r22, Y+7	; 0x07
    12d6:	78 85       	ldd	r23, Y+8	; 0x08
    12d8:	89 85       	ldd	r24, Y+9	; 0x09
    12da:	9a 85       	ldd	r25, Y+10	; 0x0a
    12dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	9e 83       	std	Y+6, r25	; 0x06
    12e6:	8d 83       	std	Y+5, r24	; 0x05
    12e8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ea:	9e 81       	ldd	r25, Y+6	; 0x06
    12ec:	9a 83       	std	Y+2, r25	; 0x02
    12ee:	89 83       	std	Y+1, r24	; 0x01
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	9a 81       	ldd	r25, Y+2	; 0x02
    12f4:	01 97       	sbiw	r24, 0x01	; 1
    12f6:	f1 f7       	brne	.-4      	; 0x12f4 <HKEYPAD_u8GetPressedKey+0x120>
    12f8:	9a 83       	std	Y+2, r25	; 0x02
    12fa:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(20);
				local_u8PinValue = MDIO_u8GetPinValue(KEYPAD_PORT, (local_u8ColCounter+4));
    12fc:	8a 89       	ldd	r24, Y+18	; 0x12
    12fe:	98 2f       	mov	r25, r24
    1300:	9c 5f       	subi	r25, 0xFC	; 252
    1302:	82 e0       	ldi	r24, 0x02	; 2
    1304:	69 2f       	mov	r22, r25
    1306:	0e 94 df 07 	call	0xfbe	; 0xfbe <MDIO_u8GetPinValue>
    130a:	89 8b       	std	Y+17, r24	; 0x11
    130c:	08 c0       	rjmp	.+16     	; 0x131e <HKEYPAD_u8GetPressedKey+0x14a>
				while(local_u8PinValue==0)
				{
					local_u8PinValue = MDIO_u8GetPinValue(KEYPAD_PORT, (local_u8ColCounter+4));
    130e:	8a 89       	ldd	r24, Y+18	; 0x12
    1310:	98 2f       	mov	r25, r24
    1312:	9c 5f       	subi	r25, 0xFC	; 252
    1314:	82 e0       	ldi	r24, 0x02	; 2
    1316:	69 2f       	mov	r22, r25
    1318:	0e 94 df 07 	call	0xfbe	; 0xfbe <MDIO_u8GetPinValue>
    131c:	89 8b       	std	Y+17, r24	; 0x11
			local_u8PinValue = MDIO_u8GetPinValue(KEYPAD_PORT, (local_u8ColCounter+4));
			if (local_u8PinValue==0)
			{
				_delay_ms(20);
				local_u8PinValue = MDIO_u8GetPinValue(KEYPAD_PORT, (local_u8ColCounter+4));
				while(local_u8PinValue==0)
    131e:	89 89       	ldd	r24, Y+17	; 0x11
    1320:	88 23       	and	r24, r24
    1322:	a9 f3       	breq	.-22     	; 0x130e <HKEYPAD_u8GetPressedKey+0x13a>
				{
					local_u8PinValue = MDIO_u8GetPinValue(KEYPAD_PORT, (local_u8ColCounter+4));
				}
				local_u8KeyValue=KEYPAD_Au8Keys[local_u8RowCounter][local_u8ColCounter];
    1324:	8b 89       	ldd	r24, Y+19	; 0x13
    1326:	48 2f       	mov	r20, r24
    1328:	50 e0       	ldi	r21, 0x00	; 0
    132a:	8a 89       	ldd	r24, Y+18	; 0x12
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	ca 01       	movw	r24, r20
    1332:	88 0f       	add	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	82 0f       	add	r24, r18
    133c:	93 1f       	adc	r25, r19
    133e:	fc 01       	movw	r30, r24
    1340:	e8 59       	subi	r30, 0x98	; 152
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	80 81       	ld	r24, Z
    1346:	88 8b       	std	Y+16, r24	; 0x10
				local_u8Flag=KEYPAD_u8_FLAG_UP;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	8f 87       	std	Y+15, r24	; 0x0f
    134c:	07 c0       	rjmp	.+14     	; 0x135c <HKEYPAD_u8GetPressedKey+0x188>
	u8 local_u8Flag=KEYPAD_u8_FLAG_DOWN;
	for (local_u8RowCounter=0; local_u8RowCounter<KEYPAD_u8_ROW_NUM;local_u8RowCounter++)
	{
		MDIO_voidSetPinValue(KEYPAD_PORT, local_u8RowCounter, LOW);

		for (local_u8ColCounter=0;local_u8ColCounter<KEYPAD_u8_COL_NUM;local_u8ColCounter++)
    134e:	8a 89       	ldd	r24, Y+18	; 0x12
    1350:	8f 5f       	subi	r24, 0xFF	; 255
    1352:	8a 8b       	std	Y+18, r24	; 0x12
    1354:	8a 89       	ldd	r24, Y+18	; 0x12
    1356:	84 30       	cpi	r24, 0x04	; 4
    1358:	08 f4       	brcc	.+2      	; 0x135c <HKEYPAD_u8GetPressedKey+0x188>
    135a:	52 cf       	rjmp	.-348    	; 0x1200 <HKEYPAD_u8GetPressedKey+0x2c>
				local_u8KeyValue=KEYPAD_Au8Keys[local_u8RowCounter][local_u8ColCounter];
				local_u8Flag=KEYPAD_u8_FLAG_UP;
				break;
			}
		}
		MDIO_voidSetPinValue(KEYPAD_PORT, local_u8RowCounter, HIGH);
    135c:	82 e0       	ldi	r24, 0x02	; 2
    135e:	6b 89       	ldd	r22, Y+19	; 0x13
    1360:	41 e0       	ldi	r20, 0x01	; 1
    1362:	0e 94 bd 06 	call	0xd7a	; 0xd7a <MDIO_voidSetPinValue>
		if (local_u8Flag==KEYPAD_u8_FLAG_UP)
    1366:	8f 85       	ldd	r24, Y+15	; 0x0f
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	39 f0       	breq	.+14     	; 0x137a <HKEYPAD_u8GetPressedKey+0x1a6>
	// Col Input pull-up
u8 HKEYPAD_u8GetPressedKey (void)
{
	u8 local_u8RowCounter,local_u8ColCounter,local_u8PinValue, local_u8KeyValue=KEYPAD_u8_KEY_NOT_PRESSED;
	u8 local_u8Flag=KEYPAD_u8_FLAG_DOWN;
	for (local_u8RowCounter=0; local_u8RowCounter<KEYPAD_u8_ROW_NUM;local_u8RowCounter++)
    136c:	8b 89       	ldd	r24, Y+19	; 0x13
    136e:	8f 5f       	subi	r24, 0xFF	; 255
    1370:	8b 8b       	std	Y+19, r24	; 0x13
    1372:	8b 89       	ldd	r24, Y+19	; 0x13
    1374:	84 30       	cpi	r24, 0x04	; 4
    1376:	08 f4       	brcc	.+2      	; 0x137a <HKEYPAD_u8GetPressedKey+0x1a6>
    1378:	3c cf       	rjmp	.-392    	; 0x11f2 <HKEYPAD_u8GetPressedKey+0x1e>
			break;
		}

	}

	return local_u8KeyValue;
    137a:	88 89       	ldd	r24, Y+16	; 0x10
}
    137c:	63 96       	adiw	r28, 0x13	; 19
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	f8 94       	cli
    1382:	de bf       	out	0x3e, r29	; 62
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	cd bf       	out	0x3d, r28	; 61
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <HLCD_voidSendCommand>:
#define FIRST_ROW_START 0x00
#define SEC_ROW_START   0x40
#define SET_AC_MASK     0x80

void HLCD_voidSendCommand(u8 A_u8Cmd)
{
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	6d 97       	sbiw	r28, 0x1d	; 29
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Control RS and RW Pins */
	MDIO_voidSetPinValue(CONTROL_PORT,PIN0,LOW);
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	60 e0       	ldi	r22, 0x00	; 0
    13a8:	40 e0       	ldi	r20, 0x00	; 0
    13aa:	0e 94 bd 06 	call	0xd7a	; 0xd7a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(CONTROL_PORT,PIN1,LOW);
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	61 e0       	ldi	r22, 0x01	; 1
    13b2:	40 e0       	ldi	r20, 0x00	; 0
    13b4:	0e 94 bd 06 	call	0xd7a	; 0xd7a <MDIO_voidSetPinValue>

	/* Write Command on the data pins */
	MDIO_voidSetPortValue(DATA_PORT,A_u8Cmd);
    13b8:	83 e0       	ldi	r24, 0x03	; 3
    13ba:	6d 8d       	ldd	r22, Y+29	; 0x1d
    13bc:	0e 94 a6 08 	call	0x114c	; 0x114c <MDIO_voidSetPortValue>

	/* Pulse on the enable pin */
	MDIO_voidSetPinValue(CONTROL_PORT,PIN2,HIGH);
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	62 e0       	ldi	r22, 0x02	; 2
    13c4:	41 e0       	ldi	r20, 0x01	; 1
    13c6:	0e 94 bd 06 	call	0xd7a	; 0xd7a <MDIO_voidSetPinValue>
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	a0 e8       	ldi	r26, 0x80	; 128
    13d0:	bf e3       	ldi	r27, 0x3F	; 63
    13d2:	89 8f       	std	Y+25, r24	; 0x19
    13d4:	9a 8f       	std	Y+26, r25	; 0x1a
    13d6:	ab 8f       	std	Y+27, r26	; 0x1b
    13d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13da:	69 8d       	ldd	r22, Y+25	; 0x19
    13dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	4a ef       	ldi	r20, 0xFA	; 250
    13e8:	54 e4       	ldi	r21, 0x44	; 68
    13ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13ee:	dc 01       	movw	r26, r24
    13f0:	cb 01       	movw	r24, r22
    13f2:	8d 8b       	std	Y+21, r24	; 0x15
    13f4:	9e 8b       	std	Y+22, r25	; 0x16
    13f6:	af 8b       	std	Y+23, r26	; 0x17
    13f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13fa:	6d 89       	ldd	r22, Y+21	; 0x15
    13fc:	7e 89       	ldd	r23, Y+22	; 0x16
    13fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1400:	98 8d       	ldd	r25, Y+24	; 0x18
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	40 e8       	ldi	r20, 0x80	; 128
    1408:	5f e3       	ldi	r21, 0x3F	; 63
    140a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    140e:	88 23       	and	r24, r24
    1410:	2c f4       	brge	.+10     	; 0x141c <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	9c 8b       	std	Y+20, r25	; 0x14
    1418:	8b 8b       	std	Y+19, r24	; 0x13
    141a:	3f c0       	rjmp	.+126    	; 0x149a <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    141c:	6d 89       	ldd	r22, Y+21	; 0x15
    141e:	7e 89       	ldd	r23, Y+22	; 0x16
    1420:	8f 89       	ldd	r24, Y+23	; 0x17
    1422:	98 8d       	ldd	r25, Y+24	; 0x18
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	3f ef       	ldi	r19, 0xFF	; 255
    1428:	4f e7       	ldi	r20, 0x7F	; 127
    142a:	57 e4       	ldi	r21, 0x47	; 71
    142c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1430:	18 16       	cp	r1, r24
    1432:	4c f5       	brge	.+82     	; 0x1486 <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1434:	69 8d       	ldd	r22, Y+25	; 0x19
    1436:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1438:	8b 8d       	ldd	r24, Y+27	; 0x1b
    143a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	40 e2       	ldi	r20, 0x20	; 32
    1442:	51 e4       	ldi	r21, 0x41	; 65
    1444:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	bc 01       	movw	r22, r24
    144e:	cd 01       	movw	r24, r26
    1450:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1454:	dc 01       	movw	r26, r24
    1456:	cb 01       	movw	r24, r22
    1458:	9c 8b       	std	Y+20, r25	; 0x14
    145a:	8b 8b       	std	Y+19, r24	; 0x13
    145c:	0f c0       	rjmp	.+30     	; 0x147c <HLCD_voidSendCommand+0xee>
    145e:	88 ec       	ldi	r24, 0xC8	; 200
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	9a 8b       	std	Y+18, r25	; 0x12
    1464:	89 8b       	std	Y+17, r24	; 0x11
    1466:	89 89       	ldd	r24, Y+17	; 0x11
    1468:	9a 89       	ldd	r25, Y+18	; 0x12
    146a:	01 97       	sbiw	r24, 0x01	; 1
    146c:	f1 f7       	brne	.-4      	; 0x146a <HLCD_voidSendCommand+0xdc>
    146e:	9a 8b       	std	Y+18, r25	; 0x12
    1470:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1472:	8b 89       	ldd	r24, Y+19	; 0x13
    1474:	9c 89       	ldd	r25, Y+20	; 0x14
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	9c 8b       	std	Y+20, r25	; 0x14
    147a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    147c:	8b 89       	ldd	r24, Y+19	; 0x13
    147e:	9c 89       	ldd	r25, Y+20	; 0x14
    1480:	00 97       	sbiw	r24, 0x00	; 0
    1482:	69 f7       	brne	.-38     	; 0x145e <HLCD_voidSendCommand+0xd0>
    1484:	14 c0       	rjmp	.+40     	; 0x14ae <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1486:	6d 89       	ldd	r22, Y+21	; 0x15
    1488:	7e 89       	ldd	r23, Y+22	; 0x16
    148a:	8f 89       	ldd	r24, Y+23	; 0x17
    148c:	98 8d       	ldd	r25, Y+24	; 0x18
    148e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1492:	dc 01       	movw	r26, r24
    1494:	cb 01       	movw	r24, r22
    1496:	9c 8b       	std	Y+20, r25	; 0x14
    1498:	8b 8b       	std	Y+19, r24	; 0x13
    149a:	8b 89       	ldd	r24, Y+19	; 0x13
    149c:	9c 89       	ldd	r25, Y+20	; 0x14
    149e:	98 8b       	std	Y+16, r25	; 0x10
    14a0:	8f 87       	std	Y+15, r24	; 0x0f
    14a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    14a4:	98 89       	ldd	r25, Y+16	; 0x10
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	f1 f7       	brne	.-4      	; 0x14a6 <HLCD_voidSendCommand+0x118>
    14aa:	98 8b       	std	Y+16, r25	; 0x10
    14ac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue(CONTROL_PORT,PIN2,LOW);
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	62 e0       	ldi	r22, 0x02	; 2
    14b2:	40 e0       	ldi	r20, 0x00	; 0
    14b4:	0e 94 bd 06 	call	0xd7a	; 0xd7a <MDIO_voidSetPinValue>
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	a0 e8       	ldi	r26, 0x80	; 128
    14be:	bf e3       	ldi	r27, 0x3F	; 63
    14c0:	8b 87       	std	Y+11, r24	; 0x0b
    14c2:	9c 87       	std	Y+12, r25	; 0x0c
    14c4:	ad 87       	std	Y+13, r26	; 0x0d
    14c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    14cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	4a ef       	ldi	r20, 0xFA	; 250
    14d6:	54 e4       	ldi	r21, 0x44	; 68
    14d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	8f 83       	std	Y+7, r24	; 0x07
    14e2:	98 87       	std	Y+8, r25	; 0x08
    14e4:	a9 87       	std	Y+9, r26	; 0x09
    14e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14e8:	6f 81       	ldd	r22, Y+7	; 0x07
    14ea:	78 85       	ldd	r23, Y+8	; 0x08
    14ec:	89 85       	ldd	r24, Y+9	; 0x09
    14ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	40 e8       	ldi	r20, 0x80	; 128
    14f6:	5f e3       	ldi	r21, 0x3F	; 63
    14f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14fc:	88 23       	and	r24, r24
    14fe:	2c f4       	brge	.+10     	; 0x150a <HLCD_voidSendCommand+0x17c>
		__ticks = 1;
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	9e 83       	std	Y+6, r25	; 0x06
    1506:	8d 83       	std	Y+5, r24	; 0x05
    1508:	3f c0       	rjmp	.+126    	; 0x1588 <HLCD_voidSendCommand+0x1fa>
	else if (__tmp > 65535)
    150a:	6f 81       	ldd	r22, Y+7	; 0x07
    150c:	78 85       	ldd	r23, Y+8	; 0x08
    150e:	89 85       	ldd	r24, Y+9	; 0x09
    1510:	9a 85       	ldd	r25, Y+10	; 0x0a
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	3f ef       	ldi	r19, 0xFF	; 255
    1516:	4f e7       	ldi	r20, 0x7F	; 127
    1518:	57 e4       	ldi	r21, 0x47	; 71
    151a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    151e:	18 16       	cp	r1, r24
    1520:	4c f5       	brge	.+82     	; 0x1574 <HLCD_voidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1522:	6b 85       	ldd	r22, Y+11	; 0x0b
    1524:	7c 85       	ldd	r23, Y+12	; 0x0c
    1526:	8d 85       	ldd	r24, Y+13	; 0x0d
    1528:	9e 85       	ldd	r25, Y+14	; 0x0e
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	40 e2       	ldi	r20, 0x20	; 32
    1530:	51 e4       	ldi	r21, 0x41	; 65
    1532:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	bc 01       	movw	r22, r24
    153c:	cd 01       	movw	r24, r26
    153e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	9e 83       	std	Y+6, r25	; 0x06
    1548:	8d 83       	std	Y+5, r24	; 0x05
    154a:	0f c0       	rjmp	.+30     	; 0x156a <HLCD_voidSendCommand+0x1dc>
    154c:	88 ec       	ldi	r24, 0xC8	; 200
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	9c 83       	std	Y+4, r25	; 0x04
    1552:	8b 83       	std	Y+3, r24	; 0x03
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <HLCD_voidSendCommand+0x1ca>
    155c:	9c 83       	std	Y+4, r25	; 0x04
    155e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1560:	8d 81       	ldd	r24, Y+5	; 0x05
    1562:	9e 81       	ldd	r25, Y+6	; 0x06
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	9e 83       	std	Y+6, r25	; 0x06
    1568:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    156a:	8d 81       	ldd	r24, Y+5	; 0x05
    156c:	9e 81       	ldd	r25, Y+6	; 0x06
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	69 f7       	brne	.-38     	; 0x154c <HLCD_voidSendCommand+0x1be>
    1572:	14 c0       	rjmp	.+40     	; 0x159c <HLCD_voidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1574:	6f 81       	ldd	r22, Y+7	; 0x07
    1576:	78 85       	ldd	r23, Y+8	; 0x08
    1578:	89 85       	ldd	r24, Y+9	; 0x09
    157a:	9a 85       	ldd	r25, Y+10	; 0x0a
    157c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	9e 83       	std	Y+6, r25	; 0x06
    1586:	8d 83       	std	Y+5, r24	; 0x05
    1588:	8d 81       	ldd	r24, Y+5	; 0x05
    158a:	9e 81       	ldd	r25, Y+6	; 0x06
    158c:	9a 83       	std	Y+2, r25	; 0x02
    158e:	89 83       	std	Y+1, r24	; 0x01
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	9a 81       	ldd	r25, Y+2	; 0x02
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	f1 f7       	brne	.-4      	; 0x1594 <HLCD_voidSendCommand+0x206>
    1598:	9a 83       	std	Y+2, r25	; 0x02
    159a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    159c:	6d 96       	adiw	r28, 0x1d	; 29
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <HLCD_voidSendData>:

void HLCD_voidSendData(u8 A_u8Data)
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	6d 97       	sbiw	r28, 0x1d	; 29
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Control RS and RW Pins */
	MDIO_voidSetPinValue(CONTROL_PORT,PIN0,HIGH);
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	60 e0       	ldi	r22, 0x00	; 0
    15c8:	41 e0       	ldi	r20, 0x01	; 1
    15ca:	0e 94 bd 06 	call	0xd7a	; 0xd7a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(CONTROL_PORT,PIN1,LOW);
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	61 e0       	ldi	r22, 0x01	; 1
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	0e 94 bd 06 	call	0xd7a	; 0xd7a <MDIO_voidSetPinValue>

	/* Write Command on the data pins */
	MDIO_voidSetPortValue(DATA_PORT,A_u8Data);
    15d8:	83 e0       	ldi	r24, 0x03	; 3
    15da:	6d 8d       	ldd	r22, Y+29	; 0x1d
    15dc:	0e 94 a6 08 	call	0x114c	; 0x114c <MDIO_voidSetPortValue>

	/* Pulse on the enable pin */
	MDIO_voidSetPinValue(CONTROL_PORT,PIN2,HIGH);
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	62 e0       	ldi	r22, 0x02	; 2
    15e4:	41 e0       	ldi	r20, 0x01	; 1
    15e6:	0e 94 bd 06 	call	0xd7a	; 0xd7a <MDIO_voidSetPinValue>
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	a0 e8       	ldi	r26, 0x80	; 128
    15f0:	bf e3       	ldi	r27, 0x3F	; 63
    15f2:	89 8f       	std	Y+25, r24	; 0x19
    15f4:	9a 8f       	std	Y+26, r25	; 0x1a
    15f6:	ab 8f       	std	Y+27, r26	; 0x1b
    15f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fa:	69 8d       	ldd	r22, Y+25	; 0x19
    15fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1600:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	4a ef       	ldi	r20, 0xFA	; 250
    1608:	54 e4       	ldi	r21, 0x44	; 68
    160a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	8d 8b       	std	Y+21, r24	; 0x15
    1614:	9e 8b       	std	Y+22, r25	; 0x16
    1616:	af 8b       	std	Y+23, r26	; 0x17
    1618:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    161a:	6d 89       	ldd	r22, Y+21	; 0x15
    161c:	7e 89       	ldd	r23, Y+22	; 0x16
    161e:	8f 89       	ldd	r24, Y+23	; 0x17
    1620:	98 8d       	ldd	r25, Y+24	; 0x18
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e8       	ldi	r20, 0x80	; 128
    1628:	5f e3       	ldi	r21, 0x3F	; 63
    162a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    162e:	88 23       	and	r24, r24
    1630:	2c f4       	brge	.+10     	; 0x163c <HLCD_voidSendData+0x8e>
		__ticks = 1;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	9c 8b       	std	Y+20, r25	; 0x14
    1638:	8b 8b       	std	Y+19, r24	; 0x13
    163a:	3f c0       	rjmp	.+126    	; 0x16ba <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    163c:	6d 89       	ldd	r22, Y+21	; 0x15
    163e:	7e 89       	ldd	r23, Y+22	; 0x16
    1640:	8f 89       	ldd	r24, Y+23	; 0x17
    1642:	98 8d       	ldd	r25, Y+24	; 0x18
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	3f ef       	ldi	r19, 0xFF	; 255
    1648:	4f e7       	ldi	r20, 0x7F	; 127
    164a:	57 e4       	ldi	r21, 0x47	; 71
    164c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1650:	18 16       	cp	r1, r24
    1652:	4c f5       	brge	.+82     	; 0x16a6 <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1654:	69 8d       	ldd	r22, Y+25	; 0x19
    1656:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1658:	8b 8d       	ldd	r24, Y+27	; 0x1b
    165a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 e2       	ldi	r20, 0x20	; 32
    1662:	51 e4       	ldi	r21, 0x41	; 65
    1664:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	bc 01       	movw	r22, r24
    166e:	cd 01       	movw	r24, r26
    1670:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	9c 8b       	std	Y+20, r25	; 0x14
    167a:	8b 8b       	std	Y+19, r24	; 0x13
    167c:	0f c0       	rjmp	.+30     	; 0x169c <HLCD_voidSendData+0xee>
    167e:	88 ec       	ldi	r24, 0xC8	; 200
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	9a 8b       	std	Y+18, r25	; 0x12
    1684:	89 8b       	std	Y+17, r24	; 0x11
    1686:	89 89       	ldd	r24, Y+17	; 0x11
    1688:	9a 89       	ldd	r25, Y+18	; 0x12
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	f1 f7       	brne	.-4      	; 0x168a <HLCD_voidSendData+0xdc>
    168e:	9a 8b       	std	Y+18, r25	; 0x12
    1690:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1692:	8b 89       	ldd	r24, Y+19	; 0x13
    1694:	9c 89       	ldd	r25, Y+20	; 0x14
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	9c 8b       	std	Y+20, r25	; 0x14
    169a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    169c:	8b 89       	ldd	r24, Y+19	; 0x13
    169e:	9c 89       	ldd	r25, Y+20	; 0x14
    16a0:	00 97       	sbiw	r24, 0x00	; 0
    16a2:	69 f7       	brne	.-38     	; 0x167e <HLCD_voidSendData+0xd0>
    16a4:	14 c0       	rjmp	.+40     	; 0x16ce <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a6:	6d 89       	ldd	r22, Y+21	; 0x15
    16a8:	7e 89       	ldd	r23, Y+22	; 0x16
    16aa:	8f 89       	ldd	r24, Y+23	; 0x17
    16ac:	98 8d       	ldd	r25, Y+24	; 0x18
    16ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	9c 8b       	std	Y+20, r25	; 0x14
    16b8:	8b 8b       	std	Y+19, r24	; 0x13
    16ba:	8b 89       	ldd	r24, Y+19	; 0x13
    16bc:	9c 89       	ldd	r25, Y+20	; 0x14
    16be:	98 8b       	std	Y+16, r25	; 0x10
    16c0:	8f 87       	std	Y+15, r24	; 0x0f
    16c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    16c4:	98 89       	ldd	r25, Y+16	; 0x10
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	f1 f7       	brne	.-4      	; 0x16c6 <HLCD_voidSendData+0x118>
    16ca:	98 8b       	std	Y+16, r25	; 0x10
    16cc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue(CONTROL_PORT,PIN2,LOW);
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	62 e0       	ldi	r22, 0x02	; 2
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	0e 94 bd 06 	call	0xd7a	; 0xd7a <MDIO_voidSetPinValue>
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	a0 e8       	ldi	r26, 0x80	; 128
    16de:	bf e3       	ldi	r27, 0x3F	; 63
    16e0:	8b 87       	std	Y+11, r24	; 0x0b
    16e2:	9c 87       	std	Y+12, r25	; 0x0c
    16e4:	ad 87       	std	Y+13, r26	; 0x0d
    16e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	4a ef       	ldi	r20, 0xFA	; 250
    16f6:	54 e4       	ldi	r21, 0x44	; 68
    16f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	8f 83       	std	Y+7, r24	; 0x07
    1702:	98 87       	std	Y+8, r25	; 0x08
    1704:	a9 87       	std	Y+9, r26	; 0x09
    1706:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1708:	6f 81       	ldd	r22, Y+7	; 0x07
    170a:	78 85       	ldd	r23, Y+8	; 0x08
    170c:	89 85       	ldd	r24, Y+9	; 0x09
    170e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 e8       	ldi	r20, 0x80	; 128
    1716:	5f e3       	ldi	r21, 0x3F	; 63
    1718:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    171c:	88 23       	and	r24, r24
    171e:	2c f4       	brge	.+10     	; 0x172a <HLCD_voidSendData+0x17c>
		__ticks = 1;
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	9e 83       	std	Y+6, r25	; 0x06
    1726:	8d 83       	std	Y+5, r24	; 0x05
    1728:	3f c0       	rjmp	.+126    	; 0x17a8 <HLCD_voidSendData+0x1fa>
	else if (__tmp > 65535)
    172a:	6f 81       	ldd	r22, Y+7	; 0x07
    172c:	78 85       	ldd	r23, Y+8	; 0x08
    172e:	89 85       	ldd	r24, Y+9	; 0x09
    1730:	9a 85       	ldd	r25, Y+10	; 0x0a
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	3f ef       	ldi	r19, 0xFF	; 255
    1736:	4f e7       	ldi	r20, 0x7F	; 127
    1738:	57 e4       	ldi	r21, 0x47	; 71
    173a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    173e:	18 16       	cp	r1, r24
    1740:	4c f5       	brge	.+82     	; 0x1794 <HLCD_voidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1742:	6b 85       	ldd	r22, Y+11	; 0x0b
    1744:	7c 85       	ldd	r23, Y+12	; 0x0c
    1746:	8d 85       	ldd	r24, Y+13	; 0x0d
    1748:	9e 85       	ldd	r25, Y+14	; 0x0e
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	40 e2       	ldi	r20, 0x20	; 32
    1750:	51 e4       	ldi	r21, 0x41	; 65
    1752:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	bc 01       	movw	r22, r24
    175c:	cd 01       	movw	r24, r26
    175e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	9e 83       	std	Y+6, r25	; 0x06
    1768:	8d 83       	std	Y+5, r24	; 0x05
    176a:	0f c0       	rjmp	.+30     	; 0x178a <HLCD_voidSendData+0x1dc>
    176c:	88 ec       	ldi	r24, 0xC8	; 200
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	9c 83       	std	Y+4, r25	; 0x04
    1772:	8b 83       	std	Y+3, r24	; 0x03
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	9c 81       	ldd	r25, Y+4	; 0x04
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	f1 f7       	brne	.-4      	; 0x1778 <HLCD_voidSendData+0x1ca>
    177c:	9c 83       	std	Y+4, r25	; 0x04
    177e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1780:	8d 81       	ldd	r24, Y+5	; 0x05
    1782:	9e 81       	ldd	r25, Y+6	; 0x06
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	9e 83       	std	Y+6, r25	; 0x06
    1788:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178a:	8d 81       	ldd	r24, Y+5	; 0x05
    178c:	9e 81       	ldd	r25, Y+6	; 0x06
    178e:	00 97       	sbiw	r24, 0x00	; 0
    1790:	69 f7       	brne	.-38     	; 0x176c <HLCD_voidSendData+0x1be>
    1792:	14 c0       	rjmp	.+40     	; 0x17bc <HLCD_voidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1794:	6f 81       	ldd	r22, Y+7	; 0x07
    1796:	78 85       	ldd	r23, Y+8	; 0x08
    1798:	89 85       	ldd	r24, Y+9	; 0x09
    179a:	9a 85       	ldd	r25, Y+10	; 0x0a
    179c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	9e 83       	std	Y+6, r25	; 0x06
    17a6:	8d 83       	std	Y+5, r24	; 0x05
    17a8:	8d 81       	ldd	r24, Y+5	; 0x05
    17aa:	9e 81       	ldd	r25, Y+6	; 0x06
    17ac:	9a 83       	std	Y+2, r25	; 0x02
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	f1 f7       	brne	.-4      	; 0x17b4 <HLCD_voidSendData+0x206>
    17b8:	9a 83       	std	Y+2, r25	; 0x02
    17ba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    17bc:	6d 96       	adiw	r28, 0x1d	; 29
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	de bf       	out	0x3e, r29	; 62
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	cd bf       	out	0x3d, r28	; 61
    17c8:	cf 91       	pop	r28
    17ca:	df 91       	pop	r29
    17cc:	08 95       	ret

000017ce <HLCD_voidInit>:

void HLCD_voidInit(void)
{
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
    17d6:	e8 97       	sbiw	r28, 0x38	; 56
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	cd bf       	out	0x3d, r28	; 61
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	a0 ef       	ldi	r26, 0xF0	; 240
    17e8:	b1 e4       	ldi	r27, 0x41	; 65
    17ea:	8d ab       	std	Y+53, r24	; 0x35
    17ec:	9e ab       	std	Y+54, r25	; 0x36
    17ee:	af ab       	std	Y+55, r26	; 0x37
    17f0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f2:	6d a9       	ldd	r22, Y+53	; 0x35
    17f4:	7e a9       	ldd	r23, Y+54	; 0x36
    17f6:	8f a9       	ldd	r24, Y+55	; 0x37
    17f8:	98 ad       	ldd	r25, Y+56	; 0x38
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	4a ef       	ldi	r20, 0xFA	; 250
    1800:	54 e4       	ldi	r21, 0x44	; 68
    1802:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	89 ab       	std	Y+49, r24	; 0x31
    180c:	9a ab       	std	Y+50, r25	; 0x32
    180e:	ab ab       	std	Y+51, r26	; 0x33
    1810:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1812:	69 a9       	ldd	r22, Y+49	; 0x31
    1814:	7a a9       	ldd	r23, Y+50	; 0x32
    1816:	8b a9       	ldd	r24, Y+51	; 0x33
    1818:	9c a9       	ldd	r25, Y+52	; 0x34
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	40 e8       	ldi	r20, 0x80	; 128
    1820:	5f e3       	ldi	r21, 0x3F	; 63
    1822:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1826:	88 23       	and	r24, r24
    1828:	2c f4       	brge	.+10     	; 0x1834 <HLCD_voidInit+0x66>
		__ticks = 1;
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	98 ab       	std	Y+48, r25	; 0x30
    1830:	8f a7       	std	Y+47, r24	; 0x2f
    1832:	3f c0       	rjmp	.+126    	; 0x18b2 <HLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1834:	69 a9       	ldd	r22, Y+49	; 0x31
    1836:	7a a9       	ldd	r23, Y+50	; 0x32
    1838:	8b a9       	ldd	r24, Y+51	; 0x33
    183a:	9c a9       	ldd	r25, Y+52	; 0x34
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	3f ef       	ldi	r19, 0xFF	; 255
    1840:	4f e7       	ldi	r20, 0x7F	; 127
    1842:	57 e4       	ldi	r21, 0x47	; 71
    1844:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1848:	18 16       	cp	r1, r24
    184a:	4c f5       	brge	.+82     	; 0x189e <HLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    184c:	6d a9       	ldd	r22, Y+53	; 0x35
    184e:	7e a9       	ldd	r23, Y+54	; 0x36
    1850:	8f a9       	ldd	r24, Y+55	; 0x37
    1852:	98 ad       	ldd	r25, Y+56	; 0x38
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	40 e2       	ldi	r20, 0x20	; 32
    185a:	51 e4       	ldi	r21, 0x41	; 65
    185c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	bc 01       	movw	r22, r24
    1866:	cd 01       	movw	r24, r26
    1868:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	98 ab       	std	Y+48, r25	; 0x30
    1872:	8f a7       	std	Y+47, r24	; 0x2f
    1874:	0f c0       	rjmp	.+30     	; 0x1894 <HLCD_voidInit+0xc6>
    1876:	88 ec       	ldi	r24, 0xC8	; 200
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	9e a7       	std	Y+46, r25	; 0x2e
    187c:	8d a7       	std	Y+45, r24	; 0x2d
    187e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1880:	9e a5       	ldd	r25, Y+46	; 0x2e
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	f1 f7       	brne	.-4      	; 0x1882 <HLCD_voidInit+0xb4>
    1886:	9e a7       	std	Y+46, r25	; 0x2e
    1888:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    188a:	8f a5       	ldd	r24, Y+47	; 0x2f
    188c:	98 a9       	ldd	r25, Y+48	; 0x30
    188e:	01 97       	sbiw	r24, 0x01	; 1
    1890:	98 ab       	std	Y+48, r25	; 0x30
    1892:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1894:	8f a5       	ldd	r24, Y+47	; 0x2f
    1896:	98 a9       	ldd	r25, Y+48	; 0x30
    1898:	00 97       	sbiw	r24, 0x00	; 0
    189a:	69 f7       	brne	.-38     	; 0x1876 <HLCD_voidInit+0xa8>
    189c:	14 c0       	rjmp	.+40     	; 0x18c6 <HLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    189e:	69 a9       	ldd	r22, Y+49	; 0x31
    18a0:	7a a9       	ldd	r23, Y+50	; 0x32
    18a2:	8b a9       	ldd	r24, Y+51	; 0x33
    18a4:	9c a9       	ldd	r25, Y+52	; 0x34
    18a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	98 ab       	std	Y+48, r25	; 0x30
    18b0:	8f a7       	std	Y+47, r24	; 0x2f
    18b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    18b4:	98 a9       	ldd	r25, Y+48	; 0x30
    18b6:	9c a7       	std	Y+44, r25	; 0x2c
    18b8:	8b a7       	std	Y+43, r24	; 0x2b
    18ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    18bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	f1 f7       	brne	.-4      	; 0x18be <HLCD_voidInit+0xf0>
    18c2:	9c a7       	std	Y+44, r25	; 0x2c
    18c4:	8b a7       	std	Y+43, r24	; 0x2b
	//wait for more than 30ms
	_delay_ms(30);

	//Function Set 0b00111100
	HLCD_voidSendCommand(FUNCTION_SET);
    18c6:	8c e3       	ldi	r24, 0x3C	; 60
    18c8:	0e 94 c7 09 	call	0x138e	; 0x138e <HLCD_voidSendCommand>
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	a0 e8       	ldi	r26, 0x80	; 128
    18d2:	bf e3       	ldi	r27, 0x3F	; 63
    18d4:	8f a3       	std	Y+39, r24	; 0x27
    18d6:	98 a7       	std	Y+40, r25	; 0x28
    18d8:	a9 a7       	std	Y+41, r26	; 0x29
    18da:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18dc:	6f a1       	ldd	r22, Y+39	; 0x27
    18de:	78 a5       	ldd	r23, Y+40	; 0x28
    18e0:	89 a5       	ldd	r24, Y+41	; 0x29
    18e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	4a ef       	ldi	r20, 0xFA	; 250
    18ea:	54 e4       	ldi	r21, 0x44	; 68
    18ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	8b a3       	std	Y+35, r24	; 0x23
    18f6:	9c a3       	std	Y+36, r25	; 0x24
    18f8:	ad a3       	std	Y+37, r26	; 0x25
    18fa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18fc:	6b a1       	ldd	r22, Y+35	; 0x23
    18fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1900:	8d a1       	ldd	r24, Y+37	; 0x25
    1902:	9e a1       	ldd	r25, Y+38	; 0x26
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e8       	ldi	r20, 0x80	; 128
    190a:	5f e3       	ldi	r21, 0x3F	; 63
    190c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1910:	88 23       	and	r24, r24
    1912:	2c f4       	brge	.+10     	; 0x191e <HLCD_voidInit+0x150>
		__ticks = 1;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	9a a3       	std	Y+34, r25	; 0x22
    191a:	89 a3       	std	Y+33, r24	; 0x21
    191c:	3f c0       	rjmp	.+126    	; 0x199c <HLCD_voidInit+0x1ce>
	else if (__tmp > 65535)
    191e:	6b a1       	ldd	r22, Y+35	; 0x23
    1920:	7c a1       	ldd	r23, Y+36	; 0x24
    1922:	8d a1       	ldd	r24, Y+37	; 0x25
    1924:	9e a1       	ldd	r25, Y+38	; 0x26
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	3f ef       	ldi	r19, 0xFF	; 255
    192a:	4f e7       	ldi	r20, 0x7F	; 127
    192c:	57 e4       	ldi	r21, 0x47	; 71
    192e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1932:	18 16       	cp	r1, r24
    1934:	4c f5       	brge	.+82     	; 0x1988 <HLCD_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1936:	6f a1       	ldd	r22, Y+39	; 0x27
    1938:	78 a5       	ldd	r23, Y+40	; 0x28
    193a:	89 a5       	ldd	r24, Y+41	; 0x29
    193c:	9a a5       	ldd	r25, Y+42	; 0x2a
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e2       	ldi	r20, 0x20	; 32
    1944:	51 e4       	ldi	r21, 0x41	; 65
    1946:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	bc 01       	movw	r22, r24
    1950:	cd 01       	movw	r24, r26
    1952:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	9a a3       	std	Y+34, r25	; 0x22
    195c:	89 a3       	std	Y+33, r24	; 0x21
    195e:	0f c0       	rjmp	.+30     	; 0x197e <HLCD_voidInit+0x1b0>
    1960:	88 ec       	ldi	r24, 0xC8	; 200
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	98 a3       	std	Y+32, r25	; 0x20
    1966:	8f 8f       	std	Y+31, r24	; 0x1f
    1968:	8f 8d       	ldd	r24, Y+31	; 0x1f
    196a:	98 a1       	ldd	r25, Y+32	; 0x20
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	f1 f7       	brne	.-4      	; 0x196c <HLCD_voidInit+0x19e>
    1970:	98 a3       	std	Y+32, r25	; 0x20
    1972:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1974:	89 a1       	ldd	r24, Y+33	; 0x21
    1976:	9a a1       	ldd	r25, Y+34	; 0x22
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	9a a3       	std	Y+34, r25	; 0x22
    197c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197e:	89 a1       	ldd	r24, Y+33	; 0x21
    1980:	9a a1       	ldd	r25, Y+34	; 0x22
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	69 f7       	brne	.-38     	; 0x1960 <HLCD_voidInit+0x192>
    1986:	14 c0       	rjmp	.+40     	; 0x19b0 <HLCD_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1988:	6b a1       	ldd	r22, Y+35	; 0x23
    198a:	7c a1       	ldd	r23, Y+36	; 0x24
    198c:	8d a1       	ldd	r24, Y+37	; 0x25
    198e:	9e a1       	ldd	r25, Y+38	; 0x26
    1990:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	9a a3       	std	Y+34, r25	; 0x22
    199a:	89 a3       	std	Y+33, r24	; 0x21
    199c:	89 a1       	ldd	r24, Y+33	; 0x21
    199e:	9a a1       	ldd	r25, Y+34	; 0x22
    19a0:	9e 8f       	std	Y+30, r25	; 0x1e
    19a2:	8d 8f       	std	Y+29, r24	; 0x1d
    19a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <HLCD_voidInit+0x1da>
    19ac:	9e 8f       	std	Y+30, r25	; 0x1e
    19ae:	8d 8f       	std	Y+29, r24	; 0x1d

	//wait for more than 39 us
	_delay_ms(1);

	//Display ON/OFF Control 0b00001100
	HLCD_voidSendCommand(DISPLAY_CONTROL);
    19b0:	8c e0       	ldi	r24, 0x0C	; 12
    19b2:	0e 94 c7 09 	call	0x138e	; 0x138e <HLCD_voidSendCommand>
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	a0 e8       	ldi	r26, 0x80	; 128
    19bc:	bf e3       	ldi	r27, 0x3F	; 63
    19be:	89 8f       	std	Y+25, r24	; 0x19
    19c0:	9a 8f       	std	Y+26, r25	; 0x1a
    19c2:	ab 8f       	std	Y+27, r26	; 0x1b
    19c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c6:	69 8d       	ldd	r22, Y+25	; 0x19
    19c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	4a ef       	ldi	r20, 0xFA	; 250
    19d4:	54 e4       	ldi	r21, 0x44	; 68
    19d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	8d 8b       	std	Y+21, r24	; 0x15
    19e0:	9e 8b       	std	Y+22, r25	; 0x16
    19e2:	af 8b       	std	Y+23, r26	; 0x17
    19e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19e6:	6d 89       	ldd	r22, Y+21	; 0x15
    19e8:	7e 89       	ldd	r23, Y+22	; 0x16
    19ea:	8f 89       	ldd	r24, Y+23	; 0x17
    19ec:	98 8d       	ldd	r25, Y+24	; 0x18
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e8       	ldi	r20, 0x80	; 128
    19f4:	5f e3       	ldi	r21, 0x3F	; 63
    19f6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19fa:	88 23       	and	r24, r24
    19fc:	2c f4       	brge	.+10     	; 0x1a08 <HLCD_voidInit+0x23a>
		__ticks = 1;
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	9c 8b       	std	Y+20, r25	; 0x14
    1a04:	8b 8b       	std	Y+19, r24	; 0x13
    1a06:	3f c0       	rjmp	.+126    	; 0x1a86 <HLCD_voidInit+0x2b8>
	else if (__tmp > 65535)
    1a08:	6d 89       	ldd	r22, Y+21	; 0x15
    1a0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	3f ef       	ldi	r19, 0xFF	; 255
    1a14:	4f e7       	ldi	r20, 0x7F	; 127
    1a16:	57 e4       	ldi	r21, 0x47	; 71
    1a18:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a1c:	18 16       	cp	r1, r24
    1a1e:	4c f5       	brge	.+82     	; 0x1a72 <HLCD_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a20:	69 8d       	ldd	r22, Y+25	; 0x19
    1a22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	40 e2       	ldi	r20, 0x20	; 32
    1a2e:	51 e4       	ldi	r21, 0x41	; 65
    1a30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	bc 01       	movw	r22, r24
    1a3a:	cd 01       	movw	r24, r26
    1a3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	9c 8b       	std	Y+20, r25	; 0x14
    1a46:	8b 8b       	std	Y+19, r24	; 0x13
    1a48:	0f c0       	rjmp	.+30     	; 0x1a68 <HLCD_voidInit+0x29a>
    1a4a:	88 ec       	ldi	r24, 0xC8	; 200
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	9a 8b       	std	Y+18, r25	; 0x12
    1a50:	89 8b       	std	Y+17, r24	; 0x11
    1a52:	89 89       	ldd	r24, Y+17	; 0x11
    1a54:	9a 89       	ldd	r25, Y+18	; 0x12
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	f1 f7       	brne	.-4      	; 0x1a56 <HLCD_voidInit+0x288>
    1a5a:	9a 8b       	std	Y+18, r25	; 0x12
    1a5c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a60:	9c 89       	ldd	r25, Y+20	; 0x14
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	9c 8b       	std	Y+20, r25	; 0x14
    1a66:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a68:	8b 89       	ldd	r24, Y+19	; 0x13
    1a6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a6c:	00 97       	sbiw	r24, 0x00	; 0
    1a6e:	69 f7       	brne	.-38     	; 0x1a4a <HLCD_voidInit+0x27c>
    1a70:	14 c0       	rjmp	.+40     	; 0x1a9a <HLCD_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a72:	6d 89       	ldd	r22, Y+21	; 0x15
    1a74:	7e 89       	ldd	r23, Y+22	; 0x16
    1a76:	8f 89       	ldd	r24, Y+23	; 0x17
    1a78:	98 8d       	ldd	r25, Y+24	; 0x18
    1a7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	9c 8b       	std	Y+20, r25	; 0x14
    1a84:	8b 8b       	std	Y+19, r24	; 0x13
    1a86:	8b 89       	ldd	r24, Y+19	; 0x13
    1a88:	9c 89       	ldd	r25, Y+20	; 0x14
    1a8a:	98 8b       	std	Y+16, r25	; 0x10
    1a8c:	8f 87       	std	Y+15, r24	; 0x0f
    1a8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a90:	98 89       	ldd	r25, Y+16	; 0x10
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	f1 f7       	brne	.-4      	; 0x1a92 <HLCD_voidInit+0x2c4>
    1a96:	98 8b       	std	Y+16, r25	; 0x10
    1a98:	8f 87       	std	Y+15, r24	; 0x0f

	//wait for more than 39 us
	_delay_ms(1);

	//Display Clear 0b00000001
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	0e 94 c7 09 	call	0x138e	; 0x138e <HLCD_voidSendCommand>
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	a0 e0       	ldi	r26, 0x00	; 0
    1aa6:	b0 e4       	ldi	r27, 0x40	; 64
    1aa8:	8b 87       	std	Y+11, r24	; 0x0b
    1aaa:	9c 87       	std	Y+12, r25	; 0x0c
    1aac:	ad 87       	std	Y+13, r26	; 0x0d
    1aae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	4a ef       	ldi	r20, 0xFA	; 250
    1abe:	54 e4       	ldi	r21, 0x44	; 68
    1ac0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	8f 83       	std	Y+7, r24	; 0x07
    1aca:	98 87       	std	Y+8, r25	; 0x08
    1acc:	a9 87       	std	Y+9, r26	; 0x09
    1ace:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad2:	78 85       	ldd	r23, Y+8	; 0x08
    1ad4:	89 85       	ldd	r24, Y+9	; 0x09
    1ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e8       	ldi	r20, 0x80	; 128
    1ade:	5f e3       	ldi	r21, 0x3F	; 63
    1ae0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ae4:	88 23       	and	r24, r24
    1ae6:	2c f4       	brge	.+10     	; 0x1af2 <HLCD_voidInit+0x324>
		__ticks = 1;
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	9e 83       	std	Y+6, r25	; 0x06
    1aee:	8d 83       	std	Y+5, r24	; 0x05
    1af0:	3f c0       	rjmp	.+126    	; 0x1b70 <HLCD_voidInit+0x3a2>
	else if (__tmp > 65535)
    1af2:	6f 81       	ldd	r22, Y+7	; 0x07
    1af4:	78 85       	ldd	r23, Y+8	; 0x08
    1af6:	89 85       	ldd	r24, Y+9	; 0x09
    1af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	3f ef       	ldi	r19, 0xFF	; 255
    1afe:	4f e7       	ldi	r20, 0x7F	; 127
    1b00:	57 e4       	ldi	r21, 0x47	; 71
    1b02:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b06:	18 16       	cp	r1, r24
    1b08:	4c f5       	brge	.+82     	; 0x1b5c <HLCD_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	40 e2       	ldi	r20, 0x20	; 32
    1b18:	51 e4       	ldi	r21, 0x41	; 65
    1b1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	bc 01       	movw	r22, r24
    1b24:	cd 01       	movw	r24, r26
    1b26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	9e 83       	std	Y+6, r25	; 0x06
    1b30:	8d 83       	std	Y+5, r24	; 0x05
    1b32:	0f c0       	rjmp	.+30     	; 0x1b52 <HLCD_voidInit+0x384>
    1b34:	88 ec       	ldi	r24, 0xC8	; 200
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	9c 83       	std	Y+4, r25	; 0x04
    1b3a:	8b 83       	std	Y+3, r24	; 0x03
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	f1 f7       	brne	.-4      	; 0x1b40 <HLCD_voidInit+0x372>
    1b44:	9c 83       	std	Y+4, r25	; 0x04
    1b46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b48:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4c:	01 97       	sbiw	r24, 0x01	; 1
    1b4e:	9e 83       	std	Y+6, r25	; 0x06
    1b50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b52:	8d 81       	ldd	r24, Y+5	; 0x05
    1b54:	9e 81       	ldd	r25, Y+6	; 0x06
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	69 f7       	brne	.-38     	; 0x1b34 <HLCD_voidInit+0x366>
    1b5a:	14 c0       	rjmp	.+40     	; 0x1b84 <HLCD_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5e:	78 85       	ldd	r23, Y+8	; 0x08
    1b60:	89 85       	ldd	r24, Y+9	; 0x09
    1b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	9e 83       	std	Y+6, r25	; 0x06
    1b6e:	8d 83       	std	Y+5, r24	; 0x05
    1b70:	8d 81       	ldd	r24, Y+5	; 0x05
    1b72:	9e 81       	ldd	r25, Y+6	; 0x06
    1b74:	9a 83       	std	Y+2, r25	; 0x02
    1b76:	89 83       	std	Y+1, r24	; 0x01
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	f1 f7       	brne	.-4      	; 0x1b7c <HLCD_voidInit+0x3ae>
    1b80:	9a 83       	std	Y+2, r25	; 0x02
    1b82:	89 83       	std	Y+1, r24	; 0x01

	//wait for more than 1.53 ms
	_delay_ms(2);

	// Entry Mode Set 0b00000110
	HLCD_voidSendCommand(ENTRY_MODE_SET);
    1b84:	86 e0       	ldi	r24, 0x06	; 6
    1b86:	0e 94 c7 09 	call	0x138e	; 0x138e <HLCD_voidSendCommand>
}
    1b8a:	e8 96       	adiw	r28, 0x38	; 56
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	f8 94       	cli
    1b90:	de bf       	out	0x3e, r29	; 62
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	cd bf       	out	0x3d, r28	; 61
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <HLCD_voidClearDisplay>:

void HLCD_voidClearDisplay(void)
{
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	2e 97       	sbiw	r28, 0x0e	; 14
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61
	//Display Clear 0b00000001
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	0e 94 c7 09 	call	0x138e	; 0x138e <HLCD_voidSendCommand>
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	a0 e0       	ldi	r26, 0x00	; 0
    1bbc:	b0 e4       	ldi	r27, 0x40	; 64
    1bbe:	8b 87       	std	Y+11, r24	; 0x0b
    1bc0:	9c 87       	std	Y+12, r25	; 0x0c
    1bc2:	ad 87       	std	Y+13, r26	; 0x0d
    1bc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	4a ef       	ldi	r20, 0xFA	; 250
    1bd4:	54 e4       	ldi	r21, 0x44	; 68
    1bd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	8f 83       	std	Y+7, r24	; 0x07
    1be0:	98 87       	std	Y+8, r25	; 0x08
    1be2:	a9 87       	std	Y+9, r26	; 0x09
    1be4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1be6:	6f 81       	ldd	r22, Y+7	; 0x07
    1be8:	78 85       	ldd	r23, Y+8	; 0x08
    1bea:	89 85       	ldd	r24, Y+9	; 0x09
    1bec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	40 e8       	ldi	r20, 0x80	; 128
    1bf4:	5f e3       	ldi	r21, 0x3F	; 63
    1bf6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bfa:	88 23       	and	r24, r24
    1bfc:	2c f4       	brge	.+10     	; 0x1c08 <HLCD_voidClearDisplay+0x6c>
		__ticks = 1;
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	9e 83       	std	Y+6, r25	; 0x06
    1c04:	8d 83       	std	Y+5, r24	; 0x05
    1c06:	3f c0       	rjmp	.+126    	; 0x1c86 <HLCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    1c08:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0a:	78 85       	ldd	r23, Y+8	; 0x08
    1c0c:	89 85       	ldd	r24, Y+9	; 0x09
    1c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	3f ef       	ldi	r19, 0xFF	; 255
    1c14:	4f e7       	ldi	r20, 0x7F	; 127
    1c16:	57 e4       	ldi	r21, 0x47	; 71
    1c18:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c1c:	18 16       	cp	r1, r24
    1c1e:	4c f5       	brge	.+82     	; 0x1c72 <HLCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	40 e2       	ldi	r20, 0x20	; 32
    1c2e:	51 e4       	ldi	r21, 0x41	; 65
    1c30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	bc 01       	movw	r22, r24
    1c3a:	cd 01       	movw	r24, r26
    1c3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	9e 83       	std	Y+6, r25	; 0x06
    1c46:	8d 83       	std	Y+5, r24	; 0x05
    1c48:	0f c0       	rjmp	.+30     	; 0x1c68 <HLCD_voidClearDisplay+0xcc>
    1c4a:	88 ec       	ldi	r24, 0xC8	; 200
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	9c 83       	std	Y+4, r25	; 0x04
    1c50:	8b 83       	std	Y+3, r24	; 0x03
    1c52:	8b 81       	ldd	r24, Y+3	; 0x03
    1c54:	9c 81       	ldd	r25, Y+4	; 0x04
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	f1 f7       	brne	.-4      	; 0x1c56 <HLCD_voidClearDisplay+0xba>
    1c5a:	9c 83       	std	Y+4, r25	; 0x04
    1c5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c60:	9e 81       	ldd	r25, Y+6	; 0x06
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	9e 83       	std	Y+6, r25	; 0x06
    1c66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c68:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6c:	00 97       	sbiw	r24, 0x00	; 0
    1c6e:	69 f7       	brne	.-38     	; 0x1c4a <HLCD_voidClearDisplay+0xae>
    1c70:	14 c0       	rjmp	.+40     	; 0x1c9a <HLCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c72:	6f 81       	ldd	r22, Y+7	; 0x07
    1c74:	78 85       	ldd	r23, Y+8	; 0x08
    1c76:	89 85       	ldd	r24, Y+9	; 0x09
    1c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	9e 83       	std	Y+6, r25	; 0x06
    1c84:	8d 83       	std	Y+5, r24	; 0x05
    1c86:	8d 81       	ldd	r24, Y+5	; 0x05
    1c88:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8a:	9a 83       	std	Y+2, r25	; 0x02
    1c8c:	89 83       	std	Y+1, r24	; 0x01
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	9a 81       	ldd	r25, Y+2	; 0x02
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	f1 f7       	brne	.-4      	; 0x1c92 <HLCD_voidClearDisplay+0xf6>
    1c96:	9a 83       	std	Y+2, r25	; 0x02
    1c98:	89 83       	std	Y+1, r24	; 0x01

	//wait for more than 1.53 ms
	_delay_ms(2);
}
    1c9a:	2e 96       	adiw	r28, 0x0e	; 14
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	de bf       	out	0x3e, r29	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	cd bf       	out	0x3d, r28	; 61
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <HLCD_voidSendString>:


void HLCD_voidSendString(u8 *A_u8PtrString)
{
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <HLCD_voidSendString+0x6>
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	9a 83       	std	Y+2, r25	; 0x02
    1cb8:	89 83       	std	Y+1, r24	; 0x01
    1cba:	0b c0       	rjmp	.+22     	; 0x1cd2 <HLCD_voidSendString+0x26>
	while (*A_u8PtrString > 0) // Check end of string
	{
		// Send Char then Move Pointer to next Char
		HLCD_voidSendData(*A_u8PtrString++);
    1cbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc0:	20 81       	ld	r18, Z
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc6:	01 96       	adiw	r24, 0x01	; 1
    1cc8:	9a 83       	std	Y+2, r25	; 0x02
    1cca:	89 83       	std	Y+1, r24	; 0x01
    1ccc:	82 2f       	mov	r24, r18
    1cce:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <HLCD_voidSendData>
}


void HLCD_voidSendString(u8 *A_u8PtrString)
{
	while (*A_u8PtrString > 0) // Check end of string
    1cd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd6:	80 81       	ld	r24, Z
    1cd8:	88 23       	and	r24, r24
    1cda:	81 f7       	brne	.-32     	; 0x1cbc <HLCD_voidSendString+0x10>
	{
		// Send Char then Move Pointer to next Char
		HLCD_voidSendData(*A_u8PtrString++);
	}
}
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	cf 91       	pop	r28
    1ce2:	df 91       	pop	r29
    1ce4:	08 95       	ret

00001ce6 <HLCD_voidGoToPosition>:




void HLCD_voidGoToPosition(u8 A_u8RowNum,u8 A_u8ColNum)
{
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	62 97       	sbiw	r28, 0x12	; 18
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	f8 94       	cli
    1cf4:	de bf       	out	0x3e, r29	; 62
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	cd bf       	out	0x3d, r28	; 61
    1cfa:	8f 87       	std	Y+15, r24	; 0x0f
    1cfc:	68 8b       	std	Y+16, r22	; 0x10
	switch (A_u8RowNum)
    1cfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	3a 8b       	std	Y+18, r19	; 0x12
    1d06:	29 8b       	std	Y+17, r18	; 0x11
    1d08:	89 89       	ldd	r24, Y+17	; 0x11
    1d0a:	9a 89       	ldd	r25, Y+18	; 0x12
    1d0c:	81 30       	cpi	r24, 0x01	; 1
    1d0e:	91 05       	cpc	r25, r1
    1d10:	31 f0       	breq	.+12     	; 0x1d1e <HLCD_voidGoToPosition+0x38>
    1d12:	29 89       	ldd	r18, Y+17	; 0x11
    1d14:	3a 89       	ldd	r19, Y+18	; 0x12
    1d16:	22 30       	cpi	r18, 0x02	; 2
    1d18:	31 05       	cpc	r19, r1
    1d1a:	31 f0       	breq	.+12     	; 0x1d28 <HLCD_voidGoToPosition+0x42>
    1d1c:	09 c0       	rjmp	.+18     	; 0x1d30 <HLCD_voidGoToPosition+0x4a>
	{
	case LCD_LINE_1: HLCD_voidSendCommand(LCD_ROW_1+A_u8ColNum); break;
    1d1e:	88 89       	ldd	r24, Y+16	; 0x10
    1d20:	81 58       	subi	r24, 0x81	; 129
    1d22:	0e 94 c7 09 	call	0x138e	; 0x138e <HLCD_voidSendCommand>
    1d26:	04 c0       	rjmp	.+8      	; 0x1d30 <HLCD_voidGoToPosition+0x4a>
	case LCD_LINE_2: HLCD_voidSendCommand(LCD_ROW_2+A_u8ColNum); break;
    1d28:	88 89       	ldd	r24, Y+16	; 0x10
    1d2a:	81 54       	subi	r24, 0x41	; 65
    1d2c:	0e 94 c7 09 	call	0x138e	; 0x138e <HLCD_voidSendCommand>
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	a0 e8       	ldi	r26, 0x80	; 128
    1d36:	bf e3       	ldi	r27, 0x3F	; 63
    1d38:	8b 87       	std	Y+11, r24	; 0x0b
    1d3a:	9c 87       	std	Y+12, r25	; 0x0c
    1d3c:	ad 87       	std	Y+13, r26	; 0x0d
    1d3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	4a ef       	ldi	r20, 0xFA	; 250
    1d4e:	54 e4       	ldi	r21, 0x44	; 68
    1d50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	8f 83       	std	Y+7, r24	; 0x07
    1d5a:	98 87       	std	Y+8, r25	; 0x08
    1d5c:	a9 87       	std	Y+9, r26	; 0x09
    1d5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d60:	6f 81       	ldd	r22, Y+7	; 0x07
    1d62:	78 85       	ldd	r23, Y+8	; 0x08
    1d64:	89 85       	ldd	r24, Y+9	; 0x09
    1d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e8       	ldi	r20, 0x80	; 128
    1d6e:	5f e3       	ldi	r21, 0x3F	; 63
    1d70:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d74:	88 23       	and	r24, r24
    1d76:	2c f4       	brge	.+10     	; 0x1d82 <HLCD_voidGoToPosition+0x9c>
		__ticks = 1;
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	9e 83       	std	Y+6, r25	; 0x06
    1d7e:	8d 83       	std	Y+5, r24	; 0x05
    1d80:	3f c0       	rjmp	.+126    	; 0x1e00 <HLCD_voidGoToPosition+0x11a>
	else if (__tmp > 65535)
    1d82:	6f 81       	ldd	r22, Y+7	; 0x07
    1d84:	78 85       	ldd	r23, Y+8	; 0x08
    1d86:	89 85       	ldd	r24, Y+9	; 0x09
    1d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	3f ef       	ldi	r19, 0xFF	; 255
    1d8e:	4f e7       	ldi	r20, 0x7F	; 127
    1d90:	57 e4       	ldi	r21, 0x47	; 71
    1d92:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d96:	18 16       	cp	r1, r24
    1d98:	4c f5       	brge	.+82     	; 0x1dec <HLCD_voidGoToPosition+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e2       	ldi	r20, 0x20	; 32
    1da8:	51 e4       	ldi	r21, 0x41	; 65
    1daa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	bc 01       	movw	r22, r24
    1db4:	cd 01       	movw	r24, r26
    1db6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	9e 83       	std	Y+6, r25	; 0x06
    1dc0:	8d 83       	std	Y+5, r24	; 0x05
    1dc2:	0f c0       	rjmp	.+30     	; 0x1de2 <HLCD_voidGoToPosition+0xfc>
    1dc4:	88 ec       	ldi	r24, 0xC8	; 200
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	9c 83       	std	Y+4, r25	; 0x04
    1dca:	8b 83       	std	Y+3, r24	; 0x03
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	f1 f7       	brne	.-4      	; 0x1dd0 <HLCD_voidGoToPosition+0xea>
    1dd4:	9c 83       	std	Y+4, r25	; 0x04
    1dd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dda:	9e 81       	ldd	r25, Y+6	; 0x06
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	9e 83       	std	Y+6, r25	; 0x06
    1de0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de2:	8d 81       	ldd	r24, Y+5	; 0x05
    1de4:	9e 81       	ldd	r25, Y+6	; 0x06
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	69 f7       	brne	.-38     	; 0x1dc4 <HLCD_voidGoToPosition+0xde>
    1dea:	14 c0       	rjmp	.+40     	; 0x1e14 <HLCD_voidGoToPosition+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dec:	6f 81       	ldd	r22, Y+7	; 0x07
    1dee:	78 85       	ldd	r23, Y+8	; 0x08
    1df0:	89 85       	ldd	r24, Y+9	; 0x09
    1df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	9e 83       	std	Y+6, r25	; 0x06
    1dfe:	8d 83       	std	Y+5, r24	; 0x05
    1e00:	8d 81       	ldd	r24, Y+5	; 0x05
    1e02:	9e 81       	ldd	r25, Y+6	; 0x06
    1e04:	9a 83       	std	Y+2, r25	; 0x02
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	f1 f7       	brne	.-4      	; 0x1e0c <HLCD_voidGoToPosition+0x126>
    1e10:	9a 83       	std	Y+2, r25	; 0x02
    1e12:	89 83       	std	Y+1, r24	; 0x01
	}
	//wait for more than 39 usec
	_delay_ms(1);
}
    1e14:	62 96       	adiw	r28, 0x12	; 18
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	cd bf       	out	0x3d, r28	; 61
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <HLCD_voidDisplayNumber>:

void HLCD_voidDisplayNumber(s32 A_s32Number)
{
    1e26:	ef 92       	push	r14
    1e28:	ff 92       	push	r15
    1e2a:	0f 93       	push	r16
    1e2c:	1f 93       	push	r17
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	28 97       	sbiw	r28, 0x08	; 8
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	f8 94       	cli
    1e3c:	de bf       	out	0x3e, r29	; 62
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	cd bf       	out	0x3d, r28	; 61
    1e42:	6d 83       	std	Y+5, r22	; 0x05
    1e44:	7e 83       	std	Y+6, r23	; 0x06
    1e46:	8f 83       	std	Y+7, r24	; 0x07
    1e48:	98 87       	std	Y+8, r25	; 0x08
	u32 local_u32Number=1;
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	a0 e0       	ldi	r26, 0x00	; 0
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	89 83       	std	Y+1, r24	; 0x01
    1e54:	9a 83       	std	Y+2, r25	; 0x02
    1e56:	ab 83       	std	Y+3, r26	; 0x03
    1e58:	bc 83       	std	Y+4, r27	; 0x04
	if (A_s32Number==0)
    1e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5e:	af 81       	ldd	r26, Y+7	; 0x07
    1e60:	b8 85       	ldd	r27, Y+8	; 0x08
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	a1 05       	cpc	r26, r1
    1e66:	b1 05       	cpc	r27, r1
    1e68:	19 f4       	brne	.+6      	; 0x1e70 <HLCD_voidDisplayNumber+0x4a>
	{
		HLCD_voidSendData('0');
    1e6a:	80 e3       	ldi	r24, 0x30	; 48
    1e6c:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <HLCD_voidSendData>
	}
	if (A_s32Number<0)
    1e70:	8d 81       	ldd	r24, Y+5	; 0x05
    1e72:	9e 81       	ldd	r25, Y+6	; 0x06
    1e74:	af 81       	ldd	r26, Y+7	; 0x07
    1e76:	b8 85       	ldd	r27, Y+8	; 0x08
    1e78:	bb 23       	and	r27, r27
    1e7a:	0c f0       	brlt	.+2      	; 0x1e7e <HLCD_voidDisplayNumber+0x58>
    1e7c:	49 c0       	rjmp	.+146    	; 0x1f10 <HLCD_voidDisplayNumber+0xea>
	{
		HLCD_voidSendData('-');
    1e7e:	8d e2       	ldi	r24, 0x2D	; 45
    1e80:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <HLCD_voidSendData>
		A_s32Number *=-1;
    1e84:	8d 81       	ldd	r24, Y+5	; 0x05
    1e86:	9e 81       	ldd	r25, Y+6	; 0x06
    1e88:	af 81       	ldd	r26, Y+7	; 0x07
    1e8a:	b8 85       	ldd	r27, Y+8	; 0x08
    1e8c:	b0 95       	com	r27
    1e8e:	a0 95       	com	r26
    1e90:	90 95       	com	r25
    1e92:	81 95       	neg	r24
    1e94:	9f 4f       	sbci	r25, 0xFF	; 255
    1e96:	af 4f       	sbci	r26, 0xFF	; 255
    1e98:	bf 4f       	sbci	r27, 0xFF	; 255
    1e9a:	8d 83       	std	Y+5, r24	; 0x05
    1e9c:	9e 83       	std	Y+6, r25	; 0x06
    1e9e:	af 83       	std	Y+7, r26	; 0x07
    1ea0:	b8 87       	std	Y+8, r27	; 0x08
    1ea2:	36 c0       	rjmp	.+108    	; 0x1f10 <HLCD_voidDisplayNumber+0xea>
	}
	while (A_s32Number!=0)
	{
		local_u32Number = ((local_u32Number * 10)+(A_s32Number % 10));
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea8:	ab 81       	ldd	r26, Y+3	; 0x03
    1eaa:	bc 81       	ldd	r27, Y+4	; 0x04
    1eac:	2a e0       	ldi	r18, 0x0A	; 10
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	40 e0       	ldi	r20, 0x00	; 0
    1eb2:	50 e0       	ldi	r21, 0x00	; 0
    1eb4:	bc 01       	movw	r22, r24
    1eb6:	cd 01       	movw	r24, r26
    1eb8:	0e 94 74 11 	call	0x22e8	; 0x22e8 <__mulsi3>
    1ebc:	7b 01       	movw	r14, r22
    1ebe:	8c 01       	movw	r16, r24
    1ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec4:	af 81       	ldd	r26, Y+7	; 0x07
    1ec6:	b8 85       	ldd	r27, Y+8	; 0x08
    1ec8:	2a e0       	ldi	r18, 0x0A	; 10
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	40 e0       	ldi	r20, 0x00	; 0
    1ece:	50 e0       	ldi	r21, 0x00	; 0
    1ed0:	bc 01       	movw	r22, r24
    1ed2:	cd 01       	movw	r24, r26
    1ed4:	0e 94 b5 11 	call	0x236a	; 0x236a <__divmodsi4>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	8e 0d       	add	r24, r14
    1ede:	9f 1d       	adc	r25, r15
    1ee0:	a0 1f       	adc	r26, r16
    1ee2:	b1 1f       	adc	r27, r17
    1ee4:	89 83       	std	Y+1, r24	; 0x01
    1ee6:	9a 83       	std	Y+2, r25	; 0x02
    1ee8:	ab 83       	std	Y+3, r26	; 0x03
    1eea:	bc 83       	std	Y+4, r27	; 0x04
		A_s32Number = A_s32Number /10;
    1eec:	8d 81       	ldd	r24, Y+5	; 0x05
    1eee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef0:	af 81       	ldd	r26, Y+7	; 0x07
    1ef2:	b8 85       	ldd	r27, Y+8	; 0x08
    1ef4:	2a e0       	ldi	r18, 0x0A	; 10
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	40 e0       	ldi	r20, 0x00	; 0
    1efa:	50 e0       	ldi	r21, 0x00	; 0
    1efc:	bc 01       	movw	r22, r24
    1efe:	cd 01       	movw	r24, r26
    1f00:	0e 94 b5 11 	call	0x236a	; 0x236a <__divmodsi4>
    1f04:	da 01       	movw	r26, r20
    1f06:	c9 01       	movw	r24, r18
    1f08:	8d 83       	std	Y+5, r24	; 0x05
    1f0a:	9e 83       	std	Y+6, r25	; 0x06
    1f0c:	af 83       	std	Y+7, r26	; 0x07
    1f0e:	b8 87       	std	Y+8, r27	; 0x08
	if (A_s32Number<0)
	{
		HLCD_voidSendData('-');
		A_s32Number *=-1;
	}
	while (A_s32Number!=0)
    1f10:	8d 81       	ldd	r24, Y+5	; 0x05
    1f12:	9e 81       	ldd	r25, Y+6	; 0x06
    1f14:	af 81       	ldd	r26, Y+7	; 0x07
    1f16:	b8 85       	ldd	r27, Y+8	; 0x08
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	a1 05       	cpc	r26, r1
    1f1c:	b1 05       	cpc	r27, r1
    1f1e:	11 f6       	brne	.-124    	; 0x1ea4 <HLCD_voidDisplayNumber+0x7e>
    1f20:	23 c0       	rjmp	.+70     	; 0x1f68 <HLCD_voidDisplayNumber+0x142>
		local_u32Number = ((local_u32Number * 10)+(A_s32Number % 10));
		A_s32Number = A_s32Number /10;
	}
	while (local_u32Number!=1)
	{
		HLCD_voidSendData((local_u32Number%10)+48);
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	9a 81       	ldd	r25, Y+2	; 0x02
    1f26:	ab 81       	ldd	r26, Y+3	; 0x03
    1f28:	bc 81       	ldd	r27, Y+4	; 0x04
    1f2a:	2a e0       	ldi	r18, 0x0A	; 10
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	50 e0       	ldi	r21, 0x00	; 0
    1f32:	bc 01       	movw	r22, r24
    1f34:	cd 01       	movw	r24, r26
    1f36:	0e 94 93 11 	call	0x2326	; 0x2326 <__udivmodsi4>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	80 5d       	subi	r24, 0xD0	; 208
    1f40:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <HLCD_voidSendData>
		local_u32Number=local_u32Number/10;
    1f44:	89 81       	ldd	r24, Y+1	; 0x01
    1f46:	9a 81       	ldd	r25, Y+2	; 0x02
    1f48:	ab 81       	ldd	r26, Y+3	; 0x03
    1f4a:	bc 81       	ldd	r27, Y+4	; 0x04
    1f4c:	2a e0       	ldi	r18, 0x0A	; 10
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e0       	ldi	r20, 0x00	; 0
    1f52:	50 e0       	ldi	r21, 0x00	; 0
    1f54:	bc 01       	movw	r22, r24
    1f56:	cd 01       	movw	r24, r26
    1f58:	0e 94 93 11 	call	0x2326	; 0x2326 <__udivmodsi4>
    1f5c:	da 01       	movw	r26, r20
    1f5e:	c9 01       	movw	r24, r18
    1f60:	89 83       	std	Y+1, r24	; 0x01
    1f62:	9a 83       	std	Y+2, r25	; 0x02
    1f64:	ab 83       	std	Y+3, r26	; 0x03
    1f66:	bc 83       	std	Y+4, r27	; 0x04
	while (A_s32Number!=0)
	{
		local_u32Number = ((local_u32Number * 10)+(A_s32Number % 10));
		A_s32Number = A_s32Number /10;
	}
	while (local_u32Number!=1)
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6c:	ab 81       	ldd	r26, Y+3	; 0x03
    1f6e:	bc 81       	ldd	r27, Y+4	; 0x04
    1f70:	81 30       	cpi	r24, 0x01	; 1
    1f72:	91 05       	cpc	r25, r1
    1f74:	a1 05       	cpc	r26, r1
    1f76:	b1 05       	cpc	r27, r1
    1f78:	a1 f6       	brne	.-88     	; 0x1f22 <HLCD_voidDisplayNumber+0xfc>
	{
		HLCD_voidSendData((local_u32Number%10)+48);
		local_u32Number=local_u32Number/10;
	}
}
    1f7a:	28 96       	adiw	r28, 0x08	; 8
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	de bf       	out	0x3e, r29	; 62
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	cd bf       	out	0x3d, r28	; 61
    1f86:	cf 91       	pop	r28
    1f88:	df 91       	pop	r29
    1f8a:	1f 91       	pop	r17
    1f8c:	0f 91       	pop	r16
    1f8e:	ff 90       	pop	r15
    1f90:	ef 90       	pop	r14
    1f92:	08 95       	ret

00001f94 <HLCD_voidGoTo>:


void HLCD_voidGoTo(u8 A_u8Row,u8 A_u8Col)
{
    1f94:	df 93       	push	r29
    1f96:	cf 93       	push	r28
    1f98:	00 d0       	rcall	.+0      	; 0x1f9a <HLCD_voidGoTo+0x6>
    1f9a:	00 d0       	rcall	.+0      	; 0x1f9c <HLCD_voidGoTo+0x8>
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	8b 83       	std	Y+3, r24	; 0x03
    1fa2:	6c 83       	std	Y+4, r22	; 0x04
	u8 L_u8DdramAddress;
	u8 L_u8Command;

	/* Valid Range */
	if ( (A_u8Row <= MAX_IDX_OF_ROWS) && (A_u8Col <= MAX_IDX_OF_COL) )
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa6:	82 30       	cpi	r24, 0x02	; 2
    1fa8:	90 f4       	brcc	.+36     	; 0x1fce <HLCD_voidGoTo+0x3a>
    1faa:	8c 81       	ldd	r24, Y+4	; 0x04
    1fac:	80 31       	cpi	r24, 0x10	; 16
    1fae:	78 f4       	brcc	.+30     	; 0x1fce <HLCD_voidGoTo+0x3a>
	{
		if (A_u8Row == FIRST_ROW_IDX)
    1fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb2:	88 23       	and	r24, r24
    1fb4:	19 f4       	brne	.+6      	; 0x1fbc <HLCD_voidGoTo+0x28>
		{
			L_u8DdramAddress = FIRST_ROW_START + A_u8Col;
    1fb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb8:	8a 83       	std	Y+2, r24	; 0x02
    1fba:	03 c0       	rjmp	.+6      	; 0x1fc2 <HLCD_voidGoTo+0x2e>
		}

		else
		{
			L_u8DdramAddress = SEC_ROW_START + A_u8Col;
    1fbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fbe:	80 5c       	subi	r24, 0xC0	; 192
    1fc0:	8a 83       	std	Y+2, r24	; 0x02
		}

		L_u8Command = L_u8DdramAddress | SET_AC_MASK;
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	80 68       	ori	r24, 0x80	; 128
    1fc6:	89 83       	std	Y+1, r24	; 0x01

		HLCD_voidSendCommand(L_u8Command);
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	0e 94 c7 09 	call	0x138e	; 0x138e <HLCD_voidSendCommand>

	else
	{
		/* Do Nothing */
	}
}
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	0f 90       	pop	r0
    1fd4:	0f 90       	pop	r0
    1fd6:	cf 91       	pop	r28
    1fd8:	df 91       	pop	r29
    1fda:	08 95       	ret

00001fdc <HLCD_voidWriteCGRAM>:


void HLCD_voidWriteCGRAM ( u8 A_u8PatternIdx, u8 *A_u8PatternValue)
{
    1fdc:	df 93       	push	r29
    1fde:	cf 93       	push	r28
    1fe0:	00 d0       	rcall	.+0      	; 0x1fe2 <HLCD_voidWriteCGRAM+0x6>
    1fe2:	00 d0       	rcall	.+0      	; 0x1fe4 <HLCD_voidWriteCGRAM+0x8>
    1fe4:	00 d0       	rcall	.+0      	; 0x1fe6 <HLCD_voidWriteCGRAM+0xa>
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	8a 83       	std	Y+2, r24	; 0x02
    1fec:	7c 83       	std	Y+4, r23	; 0x04
    1fee:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8LoopIterator;

	/* Step 1: Set AC on CGRAM */
	switch (A_u8PatternIdx)
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	28 2f       	mov	r18, r24
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	3e 83       	std	Y+6, r19	; 0x06
    1ff8:	2d 83       	std	Y+5, r18	; 0x05
    1ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	31 f0       	breq	.+12     	; 0x200e <HLCD_voidWriteCGRAM+0x32>
    2002:	2d 81       	ldd	r18, Y+5	; 0x05
    2004:	3e 81       	ldd	r19, Y+6	; 0x06
    2006:	21 30       	cpi	r18, 0x01	; 1
    2008:	31 05       	cpc	r19, r1
    200a:	29 f0       	breq	.+10     	; 0x2016 <HLCD_voidWriteCGRAM+0x3a>
    200c:	07 c0       	rjmp	.+14     	; 0x201c <HLCD_voidWriteCGRAM+0x40>
	{
		case 0  : HLCD_voidSendCommand(0x40); break;
    200e:	80 e4       	ldi	r24, 0x40	; 64
    2010:	0e 94 c7 09 	call	0x138e	; 0x138e <HLCD_voidSendCommand>
    2014:	03 c0       	rjmp	.+6      	; 0x201c <HLCD_voidWriteCGRAM+0x40>
		case 1  : HLCD_voidSendCommand(0x48); break;
    2016:	88 e4       	ldi	r24, 0x48	; 72
    2018:	0e 94 c7 09 	call	0x138e	; 0x138e <HLCD_voidSendCommand>
	 // default : /* Report Error */        ; break;
	}

	/* Step 2: Write pattern  */
	for (L_u8LoopIterator =0; L_u8LoopIterator<8;L_u8LoopIterator++)
    201c:	19 82       	std	Y+1, r1	; 0x01
    201e:	0e c0       	rjmp	.+28     	; 0x203c <HLCD_voidWriteCGRAM+0x60>
	{
		HLCD_voidSendData(A_u8PatternValue[L_u8LoopIterator]);
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	28 2f       	mov	r18, r24
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	9c 81       	ldd	r25, Y+4	; 0x04
    202a:	fc 01       	movw	r30, r24
    202c:	e2 0f       	add	r30, r18
    202e:	f3 1f       	adc	r31, r19
    2030:	80 81       	ld	r24, Z
    2032:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <HLCD_voidSendData>
		case 1  : HLCD_voidSendCommand(0x48); break;
	 // default : /* Report Error */        ; break;
	}

	/* Step 2: Write pattern  */
	for (L_u8LoopIterator =0; L_u8LoopIterator<8;L_u8LoopIterator++)
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	8f 5f       	subi	r24, 0xFF	; 255
    203a:	89 83       	std	Y+1, r24	; 0x01
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	88 30       	cpi	r24, 0x08	; 8
    2040:	78 f3       	brcs	.-34     	; 0x2020 <HLCD_voidWriteCGRAM+0x44>
	{
		HLCD_voidSendData(A_u8PatternValue[L_u8LoopIterator]);
	}
}
    2042:	26 96       	adiw	r28, 0x06	; 6
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	08 95       	ret

00002054 <main>:
#include "util/delay.h"
#define  F_CPU 8000000UL


void main (void)
{
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	c2 54       	subi	r28, 0x42	; 66
    205e:	d0 40       	sbci	r29, 0x00	; 0
    2060:	0f b6       	in	r0, 0x3f	; 63
    2062:	f8 94       	cli
    2064:	de bf       	out	0x3e, r29	; 62
    2066:	0f be       	out	0x3f, r0	; 63
    2068:	cd bf       	out	0x3d, r28	; 61


	u8 G_u8Custom1[] = {0x10, 0x14, 0x11, 0x1F, 0x00, 0x00, 0x00, 0x00};
    206a:	ce 01       	movw	r24, r28
    206c:	02 96       	adiw	r24, 0x02	; 2
    206e:	9b a7       	std	Y+43, r25	; 0x2b
    2070:	8a a7       	std	Y+42, r24	; 0x2a
    2072:	e8 e9       	ldi	r30, 0x98	; 152
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	fd a7       	std	Y+45, r31	; 0x2d
    2078:	ec a7       	std	Y+44, r30	; 0x2c
    207a:	f8 e0       	ldi	r31, 0x08	; 8
    207c:	fe a7       	std	Y+46, r31	; 0x2e
    207e:	ec a5       	ldd	r30, Y+44	; 0x2c
    2080:	fd a5       	ldd	r31, Y+45	; 0x2d
    2082:	00 80       	ld	r0, Z
    2084:	8c a5       	ldd	r24, Y+44	; 0x2c
    2086:	9d a5       	ldd	r25, Y+45	; 0x2d
    2088:	01 96       	adiw	r24, 0x01	; 1
    208a:	9d a7       	std	Y+45, r25	; 0x2d
    208c:	8c a7       	std	Y+44, r24	; 0x2c
    208e:	ea a5       	ldd	r30, Y+42	; 0x2a
    2090:	fb a5       	ldd	r31, Y+43	; 0x2b
    2092:	00 82       	st	Z, r0
    2094:	8a a5       	ldd	r24, Y+42	; 0x2a
    2096:	9b a5       	ldd	r25, Y+43	; 0x2b
    2098:	01 96       	adiw	r24, 0x01	; 1
    209a:	9b a7       	std	Y+43, r25	; 0x2b
    209c:	8a a7       	std	Y+42, r24	; 0x2a
    209e:	9e a5       	ldd	r25, Y+46	; 0x2e
    20a0:	91 50       	subi	r25, 0x01	; 1
    20a2:	9e a7       	std	Y+46, r25	; 0x2e
    20a4:	ee a5       	ldd	r30, Y+46	; 0x2e
    20a6:	ee 23       	and	r30, r30
    20a8:	51 f7       	brne	.-44     	; 0x207e <main+0x2a>
	u8 G_u8Custom2[] = {0x00, 0x00, 0x00, 0x01, 0x01, 0x1F, 0x00, 0x00};
    20aa:	ce 01       	movw	r24, r28
    20ac:	0a 96       	adiw	r24, 0x0a	; 10
    20ae:	98 ab       	std	Y+48, r25	; 0x30
    20b0:	8f a7       	std	Y+47, r24	; 0x2f
    20b2:	e0 e9       	ldi	r30, 0x90	; 144
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	fa ab       	std	Y+50, r31	; 0x32
    20b8:	e9 ab       	std	Y+49, r30	; 0x31
    20ba:	f8 e0       	ldi	r31, 0x08	; 8
    20bc:	fb ab       	std	Y+51, r31	; 0x33
    20be:	e9 a9       	ldd	r30, Y+49	; 0x31
    20c0:	fa a9       	ldd	r31, Y+50	; 0x32
    20c2:	00 80       	ld	r0, Z
    20c4:	89 a9       	ldd	r24, Y+49	; 0x31
    20c6:	9a a9       	ldd	r25, Y+50	; 0x32
    20c8:	01 96       	adiw	r24, 0x01	; 1
    20ca:	9a ab       	std	Y+50, r25	; 0x32
    20cc:	89 ab       	std	Y+49, r24	; 0x31
    20ce:	ef a5       	ldd	r30, Y+47	; 0x2f
    20d0:	f8 a9       	ldd	r31, Y+48	; 0x30
    20d2:	00 82       	st	Z, r0
    20d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    20d6:	98 a9       	ldd	r25, Y+48	; 0x30
    20d8:	01 96       	adiw	r24, 0x01	; 1
    20da:	98 ab       	std	Y+48, r25	; 0x30
    20dc:	8f a7       	std	Y+47, r24	; 0x2f
    20de:	9b a9       	ldd	r25, Y+51	; 0x33
    20e0:	91 50       	subi	r25, 0x01	; 1
    20e2:	9b ab       	std	Y+51, r25	; 0x33
    20e4:	eb a9       	ldd	r30, Y+51	; 0x33
    20e6:	ee 23       	and	r30, r30
    20e8:	51 f7       	brne	.-44     	; 0x20be <main+0x6a>
	u8 G_u8Custom3[] = {0x00, 0x00, 0x01, 0x1F, 0x00, 0x0A, 0x00, 0x00};
    20ea:	ce 01       	movw	r24, r28
    20ec:	42 96       	adiw	r24, 0x12	; 18
    20ee:	9d ab       	std	Y+53, r25	; 0x35
    20f0:	8c ab       	std	Y+52, r24	; 0x34
    20f2:	e8 e8       	ldi	r30, 0x88	; 136
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	ff ab       	std	Y+55, r31	; 0x37
    20f8:	ee ab       	std	Y+54, r30	; 0x36
    20fa:	f8 e0       	ldi	r31, 0x08	; 8
    20fc:	f8 af       	std	Y+56, r31	; 0x38
    20fe:	ee a9       	ldd	r30, Y+54	; 0x36
    2100:	ff a9       	ldd	r31, Y+55	; 0x37
    2102:	00 80       	ld	r0, Z
    2104:	8e a9       	ldd	r24, Y+54	; 0x36
    2106:	9f a9       	ldd	r25, Y+55	; 0x37
    2108:	01 96       	adiw	r24, 0x01	; 1
    210a:	9f ab       	std	Y+55, r25	; 0x37
    210c:	8e ab       	std	Y+54, r24	; 0x36
    210e:	ec a9       	ldd	r30, Y+52	; 0x34
    2110:	fd a9       	ldd	r31, Y+53	; 0x35
    2112:	00 82       	st	Z, r0
    2114:	8c a9       	ldd	r24, Y+52	; 0x34
    2116:	9d a9       	ldd	r25, Y+53	; 0x35
    2118:	01 96       	adiw	r24, 0x01	; 1
    211a:	9d ab       	std	Y+53, r25	; 0x35
    211c:	8c ab       	std	Y+52, r24	; 0x34
    211e:	98 ad       	ldd	r25, Y+56	; 0x38
    2120:	91 50       	subi	r25, 0x01	; 1
    2122:	98 af       	std	Y+56, r25	; 0x38
    2124:	e8 ad       	ldd	r30, Y+56	; 0x38
    2126:	ee 23       	and	r30, r30
    2128:	51 f7       	brne	.-44     	; 0x20fe <main+0xaa>
	u8 G_u8Custom4[] = {0x10, 0x10, 0x17, 0x1D, 0x07, 0x00, 0x00, 0x00};
    212a:	ce 01       	movw	r24, r28
    212c:	4a 96       	adiw	r24, 0x1a	; 26
    212e:	9a af       	std	Y+58, r25	; 0x3a
    2130:	89 af       	std	Y+57, r24	; 0x39
    2132:	e0 e8       	ldi	r30, 0x80	; 128
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	fc af       	std	Y+60, r31	; 0x3c
    2138:	eb af       	std	Y+59, r30	; 0x3b
    213a:	f8 e0       	ldi	r31, 0x08	; 8
    213c:	fd af       	std	Y+61, r31	; 0x3d
    213e:	eb ad       	ldd	r30, Y+59	; 0x3b
    2140:	fc ad       	ldd	r31, Y+60	; 0x3c
    2142:	00 80       	ld	r0, Z
    2144:	8b ad       	ldd	r24, Y+59	; 0x3b
    2146:	9c ad       	ldd	r25, Y+60	; 0x3c
    2148:	01 96       	adiw	r24, 0x01	; 1
    214a:	9c af       	std	Y+60, r25	; 0x3c
    214c:	8b af       	std	Y+59, r24	; 0x3b
    214e:	e9 ad       	ldd	r30, Y+57	; 0x39
    2150:	fa ad       	ldd	r31, Y+58	; 0x3a
    2152:	00 82       	st	Z, r0
    2154:	89 ad       	ldd	r24, Y+57	; 0x39
    2156:	9a ad       	ldd	r25, Y+58	; 0x3a
    2158:	01 96       	adiw	r24, 0x01	; 1
    215a:	9a af       	std	Y+58, r25	; 0x3a
    215c:	89 af       	std	Y+57, r24	; 0x39
    215e:	9d ad       	ldd	r25, Y+61	; 0x3d
    2160:	91 50       	subi	r25, 0x01	; 1
    2162:	9d af       	std	Y+61, r25	; 0x3d
    2164:	ed ad       	ldd	r30, Y+61	; 0x3d
    2166:	ee 23       	and	r30, r30
    2168:	51 f7       	brne	.-44     	; 0x213e <main+0xea>
	u8 G_u8Custom5[] = {0x00, 0x04, 0x11, 0x1F, 0x00, 0x00, 0x00, 0x00};
    216a:	ce 01       	movw	r24, r28
    216c:	82 96       	adiw	r24, 0x22	; 34
    216e:	9f af       	std	Y+63, r25	; 0x3f
    2170:	8e af       	std	Y+62, r24	; 0x3e
    2172:	e8 e7       	ldi	r30, 0x78	; 120
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	22 96       	adiw	r28, 0x02	; 2
    2178:	ff af       	std	Y+63, r31	; 0x3f
    217a:	ee af       	std	Y+62, r30	; 0x3e
    217c:	22 97       	sbiw	r28, 0x02	; 2
    217e:	f8 e0       	ldi	r31, 0x08	; 8
    2180:	23 96       	adiw	r28, 0x03	; 3
    2182:	ff af       	std	Y+63, r31	; 0x3f
    2184:	23 97       	sbiw	r28, 0x03	; 3
    2186:	22 96       	adiw	r28, 0x02	; 2
    2188:	ee ad       	ldd	r30, Y+62	; 0x3e
    218a:	ff ad       	ldd	r31, Y+63	; 0x3f
    218c:	22 97       	sbiw	r28, 0x02	; 2
    218e:	00 80       	ld	r0, Z
    2190:	22 96       	adiw	r28, 0x02	; 2
    2192:	8e ad       	ldd	r24, Y+62	; 0x3e
    2194:	9f ad       	ldd	r25, Y+63	; 0x3f
    2196:	22 97       	sbiw	r28, 0x02	; 2
    2198:	01 96       	adiw	r24, 0x01	; 1
    219a:	22 96       	adiw	r28, 0x02	; 2
    219c:	9f af       	std	Y+63, r25	; 0x3f
    219e:	8e af       	std	Y+62, r24	; 0x3e
    21a0:	22 97       	sbiw	r28, 0x02	; 2
    21a2:	ee ad       	ldd	r30, Y+62	; 0x3e
    21a4:	ff ad       	ldd	r31, Y+63	; 0x3f
    21a6:	00 82       	st	Z, r0
    21a8:	8e ad       	ldd	r24, Y+62	; 0x3e
    21aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    21ac:	01 96       	adiw	r24, 0x01	; 1
    21ae:	9f af       	std	Y+63, r25	; 0x3f
    21b0:	8e af       	std	Y+62, r24	; 0x3e
    21b2:	23 96       	adiw	r28, 0x03	; 3
    21b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    21b6:	23 97       	sbiw	r28, 0x03	; 3
    21b8:	91 50       	subi	r25, 0x01	; 1
    21ba:	23 96       	adiw	r28, 0x03	; 3
    21bc:	9f af       	std	Y+63, r25	; 0x3f
    21be:	23 97       	sbiw	r28, 0x03	; 3
    21c0:	23 96       	adiw	r28, 0x03	; 3
    21c2:	ef ad       	ldd	r30, Y+63	; 0x3f
    21c4:	23 97       	sbiw	r28, 0x03	; 3
    21c6:	ee 23       	and	r30, r30
    21c8:	f1 f6       	brne	.-68     	; 0x2186 <main+0x132>

	MDIO_voidSetPortDirection(PORTD,0xFF);
    21ca:	83 e0       	ldi	r24, 0x03	; 3
    21cc:	6f ef       	ldi	r22, 0xFF	; 255
    21ce:	0e 94 62 08 	call	0x10c4	; 0x10c4 <MDIO_voidSetPortDirection>
	MDIO_voidSetPortDirection(PORTA,0xFF);
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	6f ef       	ldi	r22, 0xFF	; 255
    21d6:	0e 94 62 08 	call	0x10c4	; 0x10c4 <MDIO_voidSetPortDirection>


	MDIO_voidSetPortDirection(PORTC, 0x0F);
    21da:	82 e0       	ldi	r24, 0x02	; 2
    21dc:	6f e0       	ldi	r22, 0x0F	; 15
    21de:	0e 94 62 08 	call	0x10c4	; 0x10c4 <MDIO_voidSetPortDirection>
	MDIO_voidSetPortDirection(PORTB, 0xFF);
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	6f ef       	ldi	r22, 0xFF	; 255
    21e6:	0e 94 62 08 	call	0x10c4	; 0x10c4 <MDIO_voidSetPortDirection>
	MDIO_voidSetPortValue(PORTC,0xFF);
    21ea:	82 e0       	ldi	r24, 0x02	; 2
    21ec:	6f ef       	ldi	r22, 0xFF	; 255
    21ee:	0e 94 a6 08 	call	0x114c	; 0x114c <MDIO_voidSetPortValue>

	u8 local_u8KeypadValue=255;
    21f2:	8f ef       	ldi	r24, 0xFF	; 255
    21f4:	89 83       	std	Y+1, r24	; 0x01

	HLCD_voidInit();
    21f6:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <HLCD_voidInit>

	HLCD_voidWriteCGRAM(0,G_u8Custom1);
    21fa:	9e 01       	movw	r18, r28
    21fc:	2e 5f       	subi	r18, 0xFE	; 254
    21fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	b9 01       	movw	r22, r18
    2204:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <HLCD_voidWriteCGRAM>
	HLCD_voidWriteCGRAM(1,G_u8Custom2);
    2208:	9e 01       	movw	r18, r28
    220a:	26 5f       	subi	r18, 0xF6	; 246
    220c:	3f 4f       	sbci	r19, 0xFF	; 255
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	b9 01       	movw	r22, r18
    2212:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <HLCD_voidWriteCGRAM>
	HLCD_voidWriteCGRAM(2,G_u8Custom3);
    2216:	9e 01       	movw	r18, r28
    2218:	2e 5e       	subi	r18, 0xEE	; 238
    221a:	3f 4f       	sbci	r19, 0xFF	; 255
    221c:	82 e0       	ldi	r24, 0x02	; 2
    221e:	b9 01       	movw	r22, r18
    2220:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <HLCD_voidWriteCGRAM>
	HLCD_voidWriteCGRAM(3,G_u8Custom4);
    2224:	9e 01       	movw	r18, r28
    2226:	26 5e       	subi	r18, 0xE6	; 230
    2228:	3f 4f       	sbci	r19, 0xFF	; 255
    222a:	83 e0       	ldi	r24, 0x03	; 3
    222c:	b9 01       	movw	r22, r18
    222e:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <HLCD_voidWriteCGRAM>
	HLCD_voidWriteCGRAM(4,G_u8Custom5);
    2232:	9e 01       	movw	r18, r28
    2234:	2e 5d       	subi	r18, 0xDE	; 222
    2236:	3f 4f       	sbci	r19, 0xFF	; 255
    2238:	84 e0       	ldi	r24, 0x04	; 4
    223a:	b9 01       	movw	r22, r18
    223c:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <HLCD_voidWriteCGRAM>

			while(1)
			{
				local_u8KeypadValue = HKEYPAD_u8GetPressedKey();
    2240:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <HKEYPAD_u8GetPressedKey>
    2244:	89 83       	std	Y+1, r24	; 0x01
				if (local_u8KeypadValue != KEYPAD_u8_KEY_NOT_PRESSED)
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	8f 3f       	cpi	r24, 0xFF	; 255
    224a:	d1 f3       	breq	.-12     	; 0x2240 <main+0x1ec>
				{
					if (local_u8KeypadValue=='8')
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	88 33       	cpi	r24, 0x38	; 56
    2250:	21 f5       	brne	.+72     	; 0x229a <main+0x246>
					{
						HLCD_voidGoTo (0,10);
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	6a e0       	ldi	r22, 0x0A	; 10
    2256:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <HLCD_voidGoTo>
						HLCD_voidSendData(0); /* draw 7rf el noon */
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <HLCD_voidSendData>

						HLCD_voidGoTo (0,9);
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	69 e0       	ldi	r22, 0x09	; 9
    2264:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <HLCD_voidGoTo>
						HLCD_voidSendData(1); /* draw 7rf el alf */
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <HLCD_voidSendData>

						HLCD_voidGoTo (0,8);
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	68 e0       	ldi	r22, 0x08	; 8
    2272:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <HLCD_voidGoTo>
						HLCD_voidSendData(2); /* draw 7rf el raa */
    2276:	82 e0       	ldi	r24, 0x02	; 2
    2278:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <HLCD_voidSendData>

						HLCD_voidGoTo (0,7);
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	67 e0       	ldi	r22, 0x07	; 7
    2280:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <HLCD_voidGoTo>
						HLCD_voidSendData(3); /* draw 7rf el yaa */
    2284:	83 e0       	ldi	r24, 0x03	; 3
    2286:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <HLCD_voidSendData>

						HLCD_voidGoTo (0,6);
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	66 e0       	ldi	r22, 0x06	; 6
    228e:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <HLCD_voidGoTo>
						HLCD_voidSendData(4); /* draw 7rf el meem */
    2292:	84 e0       	ldi	r24, 0x04	; 4
    2294:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <HLCD_voidSendData>
    2298:	d3 cf       	rjmp	.-90     	; 0x2240 <main+0x1ec>
					}
					else if (local_u8KeypadValue=='7')
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	87 33       	cpi	r24, 0x37	; 55
    229e:	81 f6       	brne	.-96     	; 0x2240 <main+0x1ec>
					{
						HLCD_voidGoTo (1,10);
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	6a e0       	ldi	r22, 0x0A	; 10
    22a4:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <HLCD_voidGoTo>
						HLCD_voidSendData(0); /* draw 7rf el noon */
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <HLCD_voidSendData>

						HLCD_voidGoTo (1,9);
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	69 e0       	ldi	r22, 0x09	; 9
    22b2:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <HLCD_voidGoTo>
						HLCD_voidSendData(1); /* draw 7rf el alf */
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <HLCD_voidSendData>

						HLCD_voidGoTo (1,8);
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	68 e0       	ldi	r22, 0x08	; 8
    22c0:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <HLCD_voidGoTo>
						HLCD_voidSendData(2); /* draw 7rf el raa */
    22c4:	82 e0       	ldi	r24, 0x02	; 2
    22c6:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <HLCD_voidSendData>

						HLCD_voidGoTo (1,7);
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	67 e0       	ldi	r22, 0x07	; 7
    22ce:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <HLCD_voidGoTo>
						HLCD_voidSendData(3); /* draw 7rf el yaa */
    22d2:	83 e0       	ldi	r24, 0x03	; 3
    22d4:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <HLCD_voidSendData>

						HLCD_voidGoTo (1,6);
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	66 e0       	ldi	r22, 0x06	; 6
    22dc:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <HLCD_voidGoTo>
						HLCD_voidSendData(4); /* draw 7rf el meem */
    22e0:	84 e0       	ldi	r24, 0x04	; 4
    22e2:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <HLCD_voidSendData>
    22e6:	ac cf       	rjmp	.-168    	; 0x2240 <main+0x1ec>

000022e8 <__mulsi3>:
    22e8:	62 9f       	mul	r22, r18
    22ea:	d0 01       	movw	r26, r0
    22ec:	73 9f       	mul	r23, r19
    22ee:	f0 01       	movw	r30, r0
    22f0:	82 9f       	mul	r24, r18
    22f2:	e0 0d       	add	r30, r0
    22f4:	f1 1d       	adc	r31, r1
    22f6:	64 9f       	mul	r22, r20
    22f8:	e0 0d       	add	r30, r0
    22fa:	f1 1d       	adc	r31, r1
    22fc:	92 9f       	mul	r25, r18
    22fe:	f0 0d       	add	r31, r0
    2300:	83 9f       	mul	r24, r19
    2302:	f0 0d       	add	r31, r0
    2304:	74 9f       	mul	r23, r20
    2306:	f0 0d       	add	r31, r0
    2308:	65 9f       	mul	r22, r21
    230a:	f0 0d       	add	r31, r0
    230c:	99 27       	eor	r25, r25
    230e:	72 9f       	mul	r23, r18
    2310:	b0 0d       	add	r27, r0
    2312:	e1 1d       	adc	r30, r1
    2314:	f9 1f       	adc	r31, r25
    2316:	63 9f       	mul	r22, r19
    2318:	b0 0d       	add	r27, r0
    231a:	e1 1d       	adc	r30, r1
    231c:	f9 1f       	adc	r31, r25
    231e:	bd 01       	movw	r22, r26
    2320:	cf 01       	movw	r24, r30
    2322:	11 24       	eor	r1, r1
    2324:	08 95       	ret

00002326 <__udivmodsi4>:
    2326:	a1 e2       	ldi	r26, 0x21	; 33
    2328:	1a 2e       	mov	r1, r26
    232a:	aa 1b       	sub	r26, r26
    232c:	bb 1b       	sub	r27, r27
    232e:	fd 01       	movw	r30, r26
    2330:	0d c0       	rjmp	.+26     	; 0x234c <__udivmodsi4_ep>

00002332 <__udivmodsi4_loop>:
    2332:	aa 1f       	adc	r26, r26
    2334:	bb 1f       	adc	r27, r27
    2336:	ee 1f       	adc	r30, r30
    2338:	ff 1f       	adc	r31, r31
    233a:	a2 17       	cp	r26, r18
    233c:	b3 07       	cpc	r27, r19
    233e:	e4 07       	cpc	r30, r20
    2340:	f5 07       	cpc	r31, r21
    2342:	20 f0       	brcs	.+8      	; 0x234c <__udivmodsi4_ep>
    2344:	a2 1b       	sub	r26, r18
    2346:	b3 0b       	sbc	r27, r19
    2348:	e4 0b       	sbc	r30, r20
    234a:	f5 0b       	sbc	r31, r21

0000234c <__udivmodsi4_ep>:
    234c:	66 1f       	adc	r22, r22
    234e:	77 1f       	adc	r23, r23
    2350:	88 1f       	adc	r24, r24
    2352:	99 1f       	adc	r25, r25
    2354:	1a 94       	dec	r1
    2356:	69 f7       	brne	.-38     	; 0x2332 <__udivmodsi4_loop>
    2358:	60 95       	com	r22
    235a:	70 95       	com	r23
    235c:	80 95       	com	r24
    235e:	90 95       	com	r25
    2360:	9b 01       	movw	r18, r22
    2362:	ac 01       	movw	r20, r24
    2364:	bd 01       	movw	r22, r26
    2366:	cf 01       	movw	r24, r30
    2368:	08 95       	ret

0000236a <__divmodsi4>:
    236a:	97 fb       	bst	r25, 7
    236c:	09 2e       	mov	r0, r25
    236e:	05 26       	eor	r0, r21
    2370:	0e d0       	rcall	.+28     	; 0x238e <__divmodsi4_neg1>
    2372:	57 fd       	sbrc	r21, 7
    2374:	04 d0       	rcall	.+8      	; 0x237e <__divmodsi4_neg2>
    2376:	d7 df       	rcall	.-82     	; 0x2326 <__udivmodsi4>
    2378:	0a d0       	rcall	.+20     	; 0x238e <__divmodsi4_neg1>
    237a:	00 1c       	adc	r0, r0
    237c:	38 f4       	brcc	.+14     	; 0x238c <__divmodsi4_exit>

0000237e <__divmodsi4_neg2>:
    237e:	50 95       	com	r21
    2380:	40 95       	com	r20
    2382:	30 95       	com	r19
    2384:	21 95       	neg	r18
    2386:	3f 4f       	sbci	r19, 0xFF	; 255
    2388:	4f 4f       	sbci	r20, 0xFF	; 255
    238a:	5f 4f       	sbci	r21, 0xFF	; 255

0000238c <__divmodsi4_exit>:
    238c:	08 95       	ret

0000238e <__divmodsi4_neg1>:
    238e:	f6 f7       	brtc	.-4      	; 0x238c <__divmodsi4_exit>
    2390:	90 95       	com	r25
    2392:	80 95       	com	r24
    2394:	70 95       	com	r23
    2396:	61 95       	neg	r22
    2398:	7f 4f       	sbci	r23, 0xFF	; 255
    239a:	8f 4f       	sbci	r24, 0xFF	; 255
    239c:	9f 4f       	sbci	r25, 0xFF	; 255
    239e:	08 95       	ret

000023a0 <__prologue_saves__>:
    23a0:	2f 92       	push	r2
    23a2:	3f 92       	push	r3
    23a4:	4f 92       	push	r4
    23a6:	5f 92       	push	r5
    23a8:	6f 92       	push	r6
    23aa:	7f 92       	push	r7
    23ac:	8f 92       	push	r8
    23ae:	9f 92       	push	r9
    23b0:	af 92       	push	r10
    23b2:	bf 92       	push	r11
    23b4:	cf 92       	push	r12
    23b6:	df 92       	push	r13
    23b8:	ef 92       	push	r14
    23ba:	ff 92       	push	r15
    23bc:	0f 93       	push	r16
    23be:	1f 93       	push	r17
    23c0:	cf 93       	push	r28
    23c2:	df 93       	push	r29
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
    23c8:	ca 1b       	sub	r28, r26
    23ca:	db 0b       	sbc	r29, r27
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	de bf       	out	0x3e, r29	; 62
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	cd bf       	out	0x3d, r28	; 61
    23d6:	09 94       	ijmp

000023d8 <__epilogue_restores__>:
    23d8:	2a 88       	ldd	r2, Y+18	; 0x12
    23da:	39 88       	ldd	r3, Y+17	; 0x11
    23dc:	48 88       	ldd	r4, Y+16	; 0x10
    23de:	5f 84       	ldd	r5, Y+15	; 0x0f
    23e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    23e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    23e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    23e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    23e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    23ea:	b9 84       	ldd	r11, Y+9	; 0x09
    23ec:	c8 84       	ldd	r12, Y+8	; 0x08
    23ee:	df 80       	ldd	r13, Y+7	; 0x07
    23f0:	ee 80       	ldd	r14, Y+6	; 0x06
    23f2:	fd 80       	ldd	r15, Y+5	; 0x05
    23f4:	0c 81       	ldd	r16, Y+4	; 0x04
    23f6:	1b 81       	ldd	r17, Y+3	; 0x03
    23f8:	aa 81       	ldd	r26, Y+2	; 0x02
    23fa:	b9 81       	ldd	r27, Y+1	; 0x01
    23fc:	ce 0f       	add	r28, r30
    23fe:	d1 1d       	adc	r29, r1
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	de bf       	out	0x3e, r29	; 62
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	cd bf       	out	0x3d, r28	; 61
    240a:	ed 01       	movw	r28, r26
    240c:	08 95       	ret

0000240e <_exit>:
    240e:	f8 94       	cli

00002410 <__stop_program>:
    2410:	ff cf       	rjmp	.-2      	; 0x2410 <__stop_program>
